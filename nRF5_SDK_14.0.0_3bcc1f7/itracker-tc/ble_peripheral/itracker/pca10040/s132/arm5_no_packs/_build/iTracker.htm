<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\iTracker.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\iTracker.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue May 22 11:14:31 2018
<BR><P>
<H3>Maximum Stack Usage =       5728 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; tc_io_main &rArr; http_refresh_auth_token_with_expire &rArr; tc_iot_create_auth_request_form &rArr; tc_iot_calc_auth_sign &rArr; tc_iot_hmac_sha256 &rArr; tc_iot_hmac_sha256_init &rArr; tc_iot_sha256_finish &rArr; tc_iot_sha256_update &rArr; __aeabi_memcpy4
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[29a]">tc_iot_mqtt_subscribe_with_results</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[132]">_handle_reconnect</a><BR>
 <LI><a href="#[12f]">_check_connection</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[132]">_handle_reconnect</a><BR>
 <LI><a href="#[64]">nrf_fstorage_sys_evt_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[232]">queue_process</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1b]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[6]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[12]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">POWER_CLOCK_IRQHandler</a> from nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">RADIO_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">RTC2_IRQHandler</a> from nrf_drv_rtc.o(i.RTC2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">SAADC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrf_drv_twi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from nrf_drv_spi.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">SWI0_EGU0_IRQHandler</a> from app_timer.o(i.SWI0_EGU0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">SWI2_EGU2_IRQHandler</a> from nrf_sdh.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[33]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[19]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[16]">TIMER1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">UARTE0_UART0_IRQHandler</a> from nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[34]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[36]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[4c]">_sensor_collect_timer_handle</a> from main.o(i._sensor_collect_timer_handle) referenced from main.o(i.sensor_collect_timer_init)
 <LI><a href="#[35]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[3a]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[3b]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[55]">_tc_iot_get_message_ack_callback</a> from tc_iot_shadow_property.o(i._tc_iot_get_message_ack_callback) referenced from tc_iot_shadow_property.o(i.tc_iot_server_init)
 <LI><a href="#[4d]">_tc_iot_report_message_ack_callback</a> from tc_iot_shadow_property.o(i._tc_iot_report_message_ack_callback) referenced from tc_iot_shadow_property.o(i.tc_iot_confirm_devcie_data)
 <LI><a href="#[4d]">_tc_iot_report_message_ack_callback</a> from tc_iot_shadow_property.o(i._tc_iot_report_message_ack_callback) referenced from tc_iot_shadow_property.o(i.tc_iot_report_device_data)
 <LI><a href="#[56]">_tc_iot_shadow_on_message_received</a> from tc_iot_shadow.o(i._tc_iot_shadow_on_message_received) referenced from tc_iot_shadow.o(i.tc_iot_shadow_construct)
 <LI><a href="#[2]">_tc_iot_shadow_property_control_callback</a> from tc_iot_device_logic.o(i._tc_iot_shadow_property_control_callback) referenced 2 times from tc_iot_device_logic.o(.data)
 <LI><a href="#[54]">_tc_iot_update_firm_message_ack_callback</a> from tc_iot_shadow_property.o(i._tc_iot_update_firm_message_ack_callback) referenced from tc_iot_shadow_property.o(i.tc_iot_report_firm)
 <LI><a href="#[49]">app_error_fault_handler</a> from app_error_weak.o(i.app_error_fault_handler) referenced from nrf_sdh.o(i.nrf_sdh_enable_request)
 <LI><a href="#[60]">ble_advertising_on_ble_evt</a> from ble_advertising.o(i.ble_advertising_on_ble_evt) referenced from main.o(sdh_ble_observers2)
 <LI><a href="#[65]">ble_advertising_on_sys_evt</a> from ble_advertising.o(i.ble_advertising_on_sys_evt) referenced from main.o(sdh_soc_observers1)
 <LI><a href="#[5b]">ble_evt_handler</a> from ble_conn_state.o(i.ble_evt_handler) referenced from ble_conn_state.o(sdh_ble_observers0)
 <LI><a href="#[5c]">ble_evt_handler</a> from main.o(i.ble_evt_handler) referenced 2 times from main.o(sdh_ble_observers1)
 <LI><a href="#[61]">ble_evt_handler</a> from ble_conn_params.o(i.ble_evt_handler) referenced from ble_conn_params.o(sdh_ble_observers2)
 <LI><a href="#[5e]">ble_nus_on_ble_evt</a> from ble_nus.o(i.ble_nus_on_ble_evt) referenced from main.o(sdh_ble_observers2)
 <LI><a href="#[57]">bsp_button_event_handler</a> from bsp.o(i.bsp_button_event_handler) referenced 4 times from bsp.o(.constdata)
 <LI><a href="#[39]">bufchar</a> from mqttpacket.o(i.bufchar) referenced from mqttpacket.o(i.MQTTPacket_decodeBuf)
 <LI><a href="#[47]">conn_params_error_handler</a> from main.o(i.conn_params_error_handler) referenced from main.o(i.main)
 <LI><a href="#[41]">gatt_evt_handler</a> from main.o(i.gatt_evt_handler) referenced from main.o(i.gatt_init)
 <LI><a href="#[37]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[32]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[5f]">nrf_ble_gatt_on_ble_evt</a> from nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt) referenced from main.o(sdh_ble_observers2)
 <LI><a href="#[4a]">nrf_drv_twi_event_handler</a> from rak_i2c_sensor.o(i.nrf_drv_twi_event_handler) referenced from rak_i2c_sensor.o(i.rak_i2c_init)
 <LI><a href="#[62]">nrf_fstorage_sdh_req_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler) referenced from nrf_fstorage_sd.o(sdh_req_observers0)
 <LI><a href="#[69]">nrf_fstorage_sdh_state_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler) referenced from nrf_fstorage_sd.o(sdh_state_observers0)
 <LI><a href="#[64]">nrf_fstorage_sys_evt_handler</a> from nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler) referenced from nrf_fstorage_sd.o(sdh_soc_observers0)
 <LI><a href="#[5a]">nrf_log_backend_rtt_flush</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[59]">nrf_log_backend_rtt_panic_set</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[58]">nrf_log_backend_rtt_put</a> from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put) referenced from nrf_log_backend_rtt.o(.constdata)
 <LI><a href="#[66]">nrf_sdh_ble_evts_poll</a> from nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll) referenced from nrf_sdh_ble.o(sdh_stack_observers0)
 <LI><a href="#[67]">nrf_sdh_soc_evts_poll</a> from nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll) referenced from nrf_sdh_soc.o(sdh_stack_observers0)
 <LI><a href="#[44]">nus_data_handler</a> from main.o(i.nus_data_handler) referenced from main.o(i.main)
 <LI><a href="#[45]">on_adv_evt</a> from main.o(i.on_adv_evt) referenced from main.o(i.main)
 <LI><a href="#[46]">on_conn_params_evt</a> from main.o(i.on_conn_params_evt) referenced from main.o(i.main)
 <LI><a href="#[43]">platform_read</a> from rak_i2c_lis2mdl.o(i.platform_read) referenced from rak_i2c_lis2mdl.o(i.lis2mdl_init)
 <LI><a href="#[42]">platform_write</a> from rak_i2c_lis2mdl.o(i.platform_write) referenced from rak_i2c_lis2mdl.o(i.lis2mdl_init)
 <LI><a href="#[68]">sd_state_evt_handler</a> from nrf_drv_clock.o(i.sd_state_evt_handler) referenced from nrf_drv_clock.o(sdh_state_observers0)
 <LI><a href="#[48]">serial_tx</a> from nrf_log_backend_rtt.o(i.serial_tx) referenced from nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
 <LI><a href="#[63]">soc_evt_handler</a> from nrf_drv_clock.o(i.soc_evt_handler) referenced from nrf_drv_clock.o(sdh_soc_observers0)
 <LI><a href="#[4b]">spi_event_handler</a> from rak_spi_sensor.o(i.spi_event_handler) referenced from rak_spi_sensor.o(i.rak_spi_init)
 <LI><a href="#[1]">tc_iot_device_on_message_received</a> from tc_iot_shadow_property.o(i.tc_iot_device_on_message_received) referenced 2 times from tc_iot_device_logic.o(.data)
 <LI><a href="#[50]">tc_iot_hal_net_connect</a> from tc_iot_hal_net.o(i.tc_iot_hal_net_connect) referenced from tc_iot_hal_net.o(i.tc_iot_hal_net_init)
 <LI><a href="#[53]">tc_iot_hal_net_destroy</a> from tc_iot_hal_net.o(i.tc_iot_hal_net_destroy) referenced from tc_iot_hal_net.o(i.tc_iot_hal_net_init)
 <LI><a href="#[51]">tc_iot_hal_net_disconnect</a> from tc_iot_hal_net.o(i.tc_iot_hal_net_disconnect) referenced from tc_iot_hal_net.o(i.tc_iot_hal_net_init)
 <LI><a href="#[52]">tc_iot_hal_net_is_connected</a> from tc_iot_hal_net.o(i.tc_iot_hal_net_is_connected) referenced from tc_iot_hal_net.o(i.tc_iot_hal_net_init)
 <LI><a href="#[4e]">tc_iot_hal_net_read</a> from tc_iot_hal_net.o(i.tc_iot_hal_net_read) referenced from tc_iot_hal_net.o(i.tc_iot_hal_net_init)
 <LI><a href="#[4f]">tc_iot_hal_net_write</a> from tc_iot_hal_net.o(i.tc_iot_hal_net_write) referenced from tc_iot_hal_net.o(i.tc_iot_hal_net_init)
 <LI><a href="#[38]">uart_event_handle</a> from bsp_itracker.o(i.uart_event_handle) referenced from bsp_itracker.o(i.Gps_Uart_Init)
 <LI><a href="#[38]">uart_event_handle</a> from bsp_itracker.o(i.uart_event_handle) referenced from bsp_itracker.o(i.Gsm_Uart_Init)
 <LI><a href="#[3f]">uart_event_handler</a> from app_uart_fifo.o(i.uart_event_handler) referenced from app_uart_fifo.o(i.app_uart_init)
 <LI><a href="#[40]">update_timeout_handler</a> from ble_conn_params.o(i.update_timeout_handler) referenced from ble_conn_params.o(i.ble_conn_params_init)
 <LI><a href="#[3e]">user_delay_ms</a> from rak_spi_bme280.o(i.user_delay_ms) referenced from rak_spi_bme280.o(i._bme280_init)
 <LI><a href="#[3c]">user_spi_read</a> from rak_spi_bme280.o(i.user_spi_read) referenced from rak_spi_bme280.o(i._bme280_init)
 <LI><a href="#[3d]">user_spi_write</a> from rak_spi_bme280.o(i.user_spi_write) referenced from rak_spi_bme280.o(i._bme280_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[34]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[2bd]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2be]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2bf]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2c0]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2c1]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2c2]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2c3]"></a>__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_memobj.o(.emb_text), UNUSED)

<P><STRONG><a name="[2c4]"></a>__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_memobj.o(.emb_text), UNUSED)

<P><STRONG><a name="[2c5]"></a>__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_memobj.o(.emb_text), UNUSED)

<P><STRONG><a name="[2c6]"></a>__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_memobj.o(.emb_text), UNUSED)

<P><STRONG><a name="[248]"></a>__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_memobj.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
</UL>

<P><STRONG><a name="[24a]"></a>__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_memobj.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
</UL>

<P><STRONG><a name="[2c7]"></a>__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_mov</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_log_frontend.o(.emb_text), UNUSED)

<P><STRONG><a name="[209]"></a>__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_orr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_log_frontend.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
</UL>

<P><STRONG><a name="[208]"></a>__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_and</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_log_frontend.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>

<P><STRONG><a name="[2c8]"></a>__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_eor</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_log_frontend.o(.emb_text), UNUSED)

<P><STRONG><a name="[2c9]"></a>__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_add</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_log_frontend.o(.emb_text), UNUSED)

<P><STRONG><a name="[2ca]"></a>__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_sub</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_log_frontend.o(.emb_text), UNUSED)

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SAADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6f]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_printf_ascii
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[37]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[2cb]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_i2c_write
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_spi_write
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_spi_read
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspTcpConnt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitNewLine
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Wait4Cmd
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hmac_sha256
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_n_append
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Uart_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps_Uart_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hmac_sha256
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_sha256_update
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_sha256_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_client_connect
</UL>

<P><STRONG><a name="[2aa]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_save_to_cached
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_copy_local_to_reported
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_doc_pack_start
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2cc]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetQNDI
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetEchoCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetDnsModeCmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetContextCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetAtsEnCmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SendDataCmd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_OpenSocketCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_GetRssiCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CloseSocketCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckSimCmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckNetworkCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckGPRSCmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_FixBaudCmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_AutoBaud
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckAutoBaud
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspTcpConnt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitNewLine
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Wait4Cmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_QIRD
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_calc_auth_sign
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_sha256_update
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_sha256_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_sha256_finish
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_device_on_message_received
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_iot_sync_shadow_property
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_refresh_auth_token_with_expire
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_construct
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_release_session
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_init_mqtt_conn_data
</UL>

<P><STRONG><a name="[2ce]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1bf]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_mem
</UL>

<P><STRONG><a name="[c4]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_GetRssiCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckSimCmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckNetworkCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckGPRSCmd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckAutoBaud
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspTcpConnt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Wait4Cmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_QIRD
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_refresh_auth_token_with_expire
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_json_find_token
</UL>

<P><STRONG><a name="[145]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_iot_sync_shadow_property
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_post_urlencoded
</UL>

<P><STRONG><a name="[ea]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_io_main
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_append
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_append_header
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_create_http_request
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_calc_auth_sign
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_device_on_message_received
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_refresh_auth_token_with_expire
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_post_urlencoded
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_update_firm_info
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_get
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_check_and_report
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_find_empty_session
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_iot_shadow_on_message_received
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_equals
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_json_find_token
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>

<P><STRONG><a name="[299]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_set_message_handler
</UL>

<P><STRONG><a name="[2a8]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_cmp_local
</UL>

<P><STRONG><a name="[115]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[9d]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsParseGpsData
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsFormatGpsData
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_parse_http_response_code
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_device_on_message_received
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_iot_sync_shadow_property
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_refresh_auth_token_with_expire
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_iot_shadow_on_message_received
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_equals
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_url_parse
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_jsoneq_len
</UL>

<P><STRONG><a name="[73]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_GetRssiCmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_QIRD
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_iot_sync_shadow_property
</UL>

<P><STRONG><a name="[76]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_refresh_auth_token_with_expire
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsConvertPositionFromStringToNumerical
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_modf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorOpt3001Convert
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsConvertPositionIntoBinary
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsConvertPositionFromStringToNumerical
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp2
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsConvertPositionIntoBinary
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsConvertPositionFromStringToNumerical
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_get_ms
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorOpt3001Convert
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsFormatGpsData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsConvertPositionFromStringToNumerical
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_get_ms
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsConvertPositionIntoBinary
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp2
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_get_ms
</UL>

<P><STRONG><a name="[1bb]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_collect_timer_handle
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rel_data_change
</UL>

<P><STRONG><a name="[124]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp2
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp2
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsConvertPositionIntoBinary
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp2
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rel_data_change
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorOpt3001Convert
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[2cf]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[2d0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[2d1]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2d2]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[75]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[2d3]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[2d4]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[79]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2d5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[8d]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[35]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[36]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[129]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[2d6]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[2d7]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 362 bytes, Stack size 80 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpio_ports_read
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>GSM_UART_TxBuf</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rak_uart_gsm.o(i.GSM_UART_TxBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = GSM_UART_TxBuf &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetQNDI
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetEchoCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetDnsModeCmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetContextCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetAtsEnCmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SendDataCmd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_OpenSocketCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_GetRssiCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CloseSocketCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckSimCmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckNetworkCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckGPRSCmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_QIRD
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_FixBaudCmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_AutoBaud
</UL>

<P><STRONG><a name="[99]"></a>GpsConvertPositionFromStringToNumerical</STRONG> (Thumb, 554 bytes, Stack size 80 bytes, gps.o(i.GpsConvertPositionFromStringToNumerical))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GpsConvertPositionFromStringToNumerical &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsFormatGpsData
</UL>

<P><STRONG><a name="[9a]"></a>GpsConvertPositionIntoBinary</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, gps.o(i.GpsConvertPositionIntoBinary))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GpsConvertPositionIntoBinary &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsFormatGpsData
</UL>

<P><STRONG><a name="[9c]"></a>GpsFormatGpsData</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, gps.o(i.GpsFormatGpsData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GpsFormatGpsData &rArr; GpsConvertPositionFromStringToNumerical &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsConvertPositionIntoBinary
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsConvertPositionFromStringToNumerical
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsParseGpsData
</UL>

<P><STRONG><a name="[9e]"></a>GpsInit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gps.o(i.GpsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GpsInit &rArr; GpsMcuInit &rArr; Gps_Uart_Init &rArr; app_uart_init &rArr; nrf_drv_uart_rx &rArr; nrf_drv_uart_rx_for_uart &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuInit
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>GpsMcuInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gps-board.o(i.GpsMcuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GpsMcuInit &rArr; Gps_Uart_Init &rArr; app_uart_init &rArr; nrf_drv_uart_rx &rArr; nrf_drv_uart_rx_for_uart &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps_Uart_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps_Gpio_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuStart
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsInit
</UL>

<P><STRONG><a name="[a3]"></a>GpsMcuIrqNotify</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, gps-board.o(i.GpsMcuIrqNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = GpsMcuIrqNotify &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsParseGpsData
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handle
</UL>

<P><STRONG><a name="[a2]"></a>GpsMcuStart</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, gps-board.o(i.GpsMcuStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GpsMcuStart
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuInit
</UL>

<P><STRONG><a name="[aa]"></a>GpsNmeaChecksum</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gps.o(i.GpsNmeaChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GpsNmeaChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Nibble2HexChar
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsParseGpsData
</UL>

<P><STRONG><a name="[a5]"></a>GpsParseGpsData</STRONG> (Thumb, 1044 bytes, Stack size 24 bytes, gps.o(i.GpsParseGpsData))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GpsParseGpsData &rArr; GpsFormatGpsData &rArr; GpsConvertPositionFromStringToNumerical &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsNmeaChecksum
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsFormatGpsData
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuIrqNotify
</UL>

<P><STRONG><a name="[a0]"></a>Gps_Gpio_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_itracker.o(i.Gps_Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gps_Gpio_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuInit
</UL>

<P><STRONG><a name="[a1]"></a>Gps_Uart_Init</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, bsp_itracker.o(i.Gps_Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Gps_Uart_Init &rArr; app_uart_init &rArr; nrf_drv_uart_rx &rArr; nrf_drv_uart_rx_for_uart &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_close
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuInit
</UL>

<P><STRONG><a name="[b0]"></a>GsmInit</STRONG> (Thumb, 506 bytes, Stack size 24 bytes, main.o(i.GsmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = GsmInit &rArr; Gsm_CheckAutoBaud &rArr; Gsm_FixBaudCmd &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetQNDI
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetEchoCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetDnsModeCmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetContextCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetAtsEnCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_GetRssiCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckSimCmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckNetworkCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckGPRSCmd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckAutoBaud
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_level_str
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>Gsm_AutoBaud</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, rak_uart_gsm.o(i.Gsm_AutoBaud))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = Gsm_AutoBaud &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_UART_TxBuf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckAutoBaud
</UL>

<P><STRONG><a name="[b2]"></a>Gsm_CheckAutoBaud</STRONG> (Thumb, 122 bytes, Stack size 96 bytes, rak_uart_gsm.o(i.Gsm_CheckAutoBaud))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = Gsm_CheckAutoBaud &rArr; Gsm_FixBaudCmd &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_RxByte
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_FixBaudCmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_AutoBaud
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInit
</UL>

<P><STRONG><a name="[b7]"></a>Gsm_CheckGPRSCmd</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rak_uart_gsm.o(i.Gsm_CheckGPRSCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = Gsm_CheckGPRSCmd &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_UART_TxBuf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInit
</UL>

<P><STRONG><a name="[b6]"></a>Gsm_CheckNetworkCmd</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, rak_uart_gsm.o(i.Gsm_CheckNetworkCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = Gsm_CheckNetworkCmd &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_UART_TxBuf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInit
</UL>

<P><STRONG><a name="[b5]"></a>Gsm_CheckSimCmd</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rak_uart_gsm.o(i.Gsm_CheckSimCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = Gsm_CheckSimCmd &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_UART_TxBuf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInit
</UL>

<P><STRONG><a name="[c7]"></a>Gsm_CloseSocketCmd</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rak_uart_gsm.o(i.Gsm_CloseSocketCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = Gsm_CloseSocketCmd &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_UART_TxBuf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_net_disconnect
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_net_connect
</UL>

<P><STRONG><a name="[c5]"></a>Gsm_FixBaudCmd</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rak_uart_gsm.o(i.Gsm_FixBaudCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = Gsm_FixBaudCmd &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_UART_TxBuf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckAutoBaud
</UL>

<P><STRONG><a name="[bc]"></a>Gsm_GetRssiCmd</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rak_uart_gsm.o(i.Gsm_GetRssiCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = Gsm_GetRssiCmd &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_UART_TxBuf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInit
</UL>

<P><STRONG><a name="[c8]"></a>Gsm_Gpio_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_itracker.o(i.Gsm_Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gsm_Gpio_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>Gsm_OpenSocketCmd</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, rak_uart_gsm.o(i.Gsm_OpenSocketCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = Gsm_OpenSocketCmd &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspTcpConnt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_UART_TxBuf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_net_connect
</UL>

<P><STRONG><a name="[cb]"></a>Gsm_PowerUp</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rak_uart_gsm.o(i.Gsm_PowerUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gsm_PowerUp
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>Gsm_QIRD</STRONG> (Thumb, 266 bytes, Stack size 96 bytes, rak_uart_gsm.o(i.Gsm_QIRD))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = Gsm_QIRD &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsm_rxbuf_print
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_mem
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitNewLine
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_RxByte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_UART_TxBuf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_RecvData2
</UL>

<P><STRONG><a name="[d1]"></a>Gsm_RecvData2</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rak_uart_gsm.o(i.Gsm_RecvData2))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = Gsm_RecvData2 &rArr; Gsm_QIRD &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Wait4Cmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_QIRD
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_net_read
</UL>

<P><STRONG><a name="[2b6]"></a>Gsm_RingBuf</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rak_uart_gsm.o(i.Gsm_RingBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gsm_RingBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handle
</UL>

<P><STRONG><a name="[c3]"></a>Gsm_RxByte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rak_uart_gsm.o(i.Gsm_RxByte))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckAutoBaud
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitSendAck
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspTcpConnt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitNewLine
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Wait4Cmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_QIRD
</UL>

<P><STRONG><a name="[d3]"></a>Gsm_SendDataCmd</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, rak_uart_gsm.o(i.Gsm_SendDataCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = Gsm_SendDataCmd &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsm_rxbuf_print
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitSendAck
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_UART_TxBuf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_net_write
</UL>

<P><STRONG><a name="[bb]"></a>Gsm_SetAtsEnCmd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rak_uart_gsm.o(i.Gsm_SetAtsEnCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = Gsm_SetAtsEnCmd &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_UART_TxBuf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInit
</UL>

<P><STRONG><a name="[b8]"></a>Gsm_SetContextCmd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rak_uart_gsm.o(i.Gsm_SetContextCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = Gsm_SetContextCmd &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_UART_TxBuf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInit
</UL>

<P><STRONG><a name="[ba]"></a>Gsm_SetDnsModeCmd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rak_uart_gsm.o(i.Gsm_SetDnsModeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = Gsm_SetDnsModeCmd &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_UART_TxBuf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInit
</UL>

<P><STRONG><a name="[b3]"></a>Gsm_SetEchoCmd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rak_uart_gsm.o(i.Gsm_SetEchoCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = Gsm_SetEchoCmd &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_UART_TxBuf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInit
</UL>

<P><STRONG><a name="[b9]"></a>Gsm_SetQNDI</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rak_uart_gsm.o(i.Gsm_SetQNDI))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = Gsm_SetQNDI &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_UART_TxBuf
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInit
</UL>

<P><STRONG><a name="[d5]"></a>Gsm_Uart_Init</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, bsp_itracker.o(i.Gsm_Uart_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Gsm_Uart_Init &rArr; app_uart_init &rArr; nrf_drv_uart_rx &rArr; nrf_drv_uart_rx_for_uart &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_close
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>Gsm_Wait4Cmd</STRONG> (Thumb, 234 bytes, Stack size 120 bytes, rak_uart_gsm.o(i.Gsm_Wait4Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = Gsm_Wait4Cmd &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_RxByte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_RecvData2
</UL>

<P><STRONG><a name="[cf]"></a>Gsm_WaitNewLine</STRONG> (Thumb, 134 bytes, Stack size 88 bytes, rak_uart_gsm.o(i.Gsm_WaitNewLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Gsm_WaitNewLine &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_RxByte
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_QIRD
</UL>

<P><STRONG><a name="[c0]"></a>Gsm_WaitRspOK</STRONG> (Thumb, 208 bytes, Stack size 96 bytes, rak_uart_gsm.o(i.Gsm_WaitRspOK))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_mem
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_RxByte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetQNDI
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetEchoCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetDnsModeCmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetContextCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetAtsEnCmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SendDataCmd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_OpenSocketCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_GetRssiCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CloseSocketCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckSimCmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckNetworkCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckGPRSCmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_QIRD
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_FixBaudCmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_AutoBaud
</UL>

<P><STRONG><a name="[ca]"></a>Gsm_WaitRspTcpConnt</STRONG> (Thumb, 132 bytes, Stack size 96 bytes, rak_uart_gsm.o(i.Gsm_WaitRspTcpConnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Gsm_WaitRspTcpConnt &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_RxByte
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_OpenSocketCmd
</UL>

<P><STRONG><a name="[d4]"></a>Gsm_WaitSendAck</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rak_uart_gsm.o(i.Gsm_WaitSendAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Gsm_WaitSendAck
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_RxByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SendDataCmd
</UL>

<P><STRONG><a name="[d7]"></a>LIS3DH_GetAccAxesRaw</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lis3dh_driver.o(i.LIS3DH_GetAccAxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = LIS3DH_GetAccAxesRaw &rArr; LIS3DH_ReadReg &rArr; nrf_drv_lis3dh_read_reg &rArr; rak_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lis3dh_data
</UL>

<P><STRONG><a name="[d8]"></a>LIS3DH_ReadReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lis3dh_driver.o(i.LIS3DH_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = LIS3DH_ReadReg &rArr; nrf_drv_lis3dh_read_reg &rArr; rak_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_lis3dh_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetODR
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetMode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetFullScale
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetAxis
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_GetAccAxesRaw
</UL>

<P><STRONG><a name="[da]"></a>LIS3DH_SetAxis</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lis3dh_driver.o(i.LIS3DH_SetAxis))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = LIS3DH_SetAxis &rArr; LIS3DH_ReadReg &rArr; nrf_drv_lis3dh_read_reg &rArr; rak_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis3dh_init
</UL>

<P><STRONG><a name="[dc]"></a>LIS3DH_SetFullScale</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lis3dh_driver.o(i.LIS3DH_SetFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = LIS3DH_SetFullScale &rArr; LIS3DH_ReadReg &rArr; nrf_drv_lis3dh_read_reg &rArr; rak_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis3dh_init
</UL>

<P><STRONG><a name="[dd]"></a>LIS3DH_SetMode</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, lis3dh_driver.o(i.LIS3DH_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = LIS3DH_SetMode &rArr; LIS3DH_ReadReg &rArr; nrf_drv_lis3dh_read_reg &rArr; rak_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis3dh_init
</UL>

<P><STRONG><a name="[de]"></a>LIS3DH_SetODR</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lis3dh_driver.o(i.LIS3DH_SetODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = LIS3DH_SetODR &rArr; LIS3DH_ReadReg &rArr; nrf_drv_lis3dh_read_reg &rArr; rak_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis3dh_init
</UL>

<P><STRONG><a name="[db]"></a>LIS3DH_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lis3dh_driver.o(i.LIS3DH_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = LIS3DH_WriteReg &rArr; nrf_drv_lis3dh_write_reg &rArr; rak_i2c_write &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_lis3dh_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetODR
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetMode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetFullScale
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetAxis
</UL>

<P><STRONG><a name="[e0]"></a>MQTTDeserialize_ack</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, mqttdeserializepublish.o(i.MQTTDeserialize_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MQTTDeserialize_ack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_publish
</UL>

<P><STRONG><a name="[e4]"></a>MQTTDeserialize_connack</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, mqttconnectclient.o(i.MQTTDeserialize_connack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MQTTDeserialize_connack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_reconnect
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_connect_with_results
</UL>

<P><STRONG><a name="[e5]"></a>MQTTDeserialize_publish</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, mqttdeserializepublish.o(i.MQTTDeserialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MQTTDeserialize_publish &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMQTTLenString
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[e7]"></a>MQTTDeserialize_suback</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, mqttsubscribeclient.o(i.MQTTDeserialize_suback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MQTTDeserialize_suback &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_subscribe_with_results
</UL>

<P><STRONG><a name="[e8]"></a>MQTTPacket_decode</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mqttpacket.o(i.MQTTPacket_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTPacket_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>

<P><STRONG><a name="[e2]"></a>MQTTPacket_decodeBuf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mqttpacket.o(i.MQTTPacket_decodeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>

<P><STRONG><a name="[ed]"></a>MQTTPacket_encode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, mqttpacket.o(i.MQTTPacket_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPacket
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>

<P><STRONG><a name="[e9]"></a>MQTTPacket_equals</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mqttpacket.o(i.MQTTPacket_equals))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MQTTPacket_equals &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliverMessage
</UL>

<P><STRONG><a name="[f1]"></a>MQTTPacket_len</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mqttpacket.o(i.MQTTPacket_len))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[eb]"></a>MQTTSerialize_ack</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mqttserializepublish.o(i.MQTTSerialize_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MQTTSerialize_ack &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[ef]"></a>MQTTSerialize_connect</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, mqttconnectclient.o(i.MQTTSerialize_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_reconnect
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_connect_with_results
</UL>

<P><STRONG><a name="[f0]"></a>MQTTSerialize_connectLength</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_connectLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTSerialize_connectLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[f5]"></a>MQTTSerialize_disconnect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mqttconnectclient.o(i.MQTTSerialize_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTSerialize_disconnect &rArr; MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_disconnect
</UL>

<P><STRONG><a name="[f7]"></a>MQTTSerialize_pingreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mqttconnectclient.o(i.MQTTSerialize_pingreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTSerialize_pingreq &rArr; MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
</UL>

<P><STRONG><a name="[f8]"></a>MQTTSerialize_publish</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, mqttserializepublish.o(i.MQTTSerialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MQTTSerialize_publish &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_publish
</UL>

<P><STRONG><a name="[f9]"></a>MQTTSerialize_publishLength</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mqttserializepublish.o(i.MQTTSerialize_publishLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>

<P><STRONG><a name="[fa]"></a>MQTTSerialize_subscribe</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, mqttsubscribeclient.o(i.MQTTSerialize_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MQTTSerialize_subscribe &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_subscribe_with_results
</UL>

<P><STRONG><a name="[fb]"></a>MQTTSerialize_subscribeLength</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, mqttsubscribeclient.o(i.MQTTSerialize_subscribeLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MQTTSerialize_subscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
</UL>

<P><STRONG><a name="[f6]"></a>MQTTSerialize_zero</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mqttconnectclient.o(i.MQTTSerialize_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_pingreq
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_disconnect
</UL>

<P><STRONG><a name="[f4]"></a>MQTTstrlen</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mqttpacket.o(i.MQTTstrlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
</UL>

<P><STRONG><a name="[ab]"></a>Nibble2HexChar</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, utilities.o(i.Nibble2HexChar))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsNmeaChecksum
</UL>

<P><STRONG><a name="[d]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RTC1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC1_IRQHandler &rArr; timer_timeouts_check
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_rtc.o(i.RTC2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC2_IRQHandler &rArr; nrf_drv_rtc_int_handler &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_int_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_init
</UL>

<P><STRONG><a name="[103]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>

<P><STRONG><a name="[105]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_tx
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[a7]"></a>SEGGER_RTT_printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, segger_rtt_printf.o(i.SEGGER_RTT_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_io_main
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt3001_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetQNDI
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_OpenSocketCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckSimCmd
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_collect_data
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_collect_timer_handle
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sensor_collect_timer_handle
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuIrqNotify
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsm_rxbuf_print
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_mem
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitNewLine
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Wait4Cmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_QIRD
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_net_write
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_net_read
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_net_connect
</UL>

<P><STRONG><a name="[10a]"></a>SEGGER_RTT_vprintf</STRONG> (Thumb, 406 bytes, Stack size 120 bytes, segger_rtt_printf.o(i.SEGGER_RTT_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>

<P><STRONG><a name="[10]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler &rArr; irq_handler_twi &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_timer.o(i.SWI0_EGU0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SWI0_EGU0_IRQHandler &rArr; timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_sdh.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; nrf_sdh_evts_poll &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SystemInit</STRONG> (Thumb, 688 bytes, Stack size 20 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[f]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UARTE0_UART0_IRQHandler &rArr; uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2d9]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[150]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_io_main
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_n_append_header
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_init
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_append_header
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_append_body
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_create_http_request
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_calc_auth_sign
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_url_long_field
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_update_firm_info
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_report_property
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_doc_pack_start
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_doc_pack_end
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_confirm_change
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_check_and_report
</UL>

<P><STRONG><a name="[2da]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[2db]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[118]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2dc]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[bf]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetQNDI
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetEchoCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetDnsModeCmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetContextCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetAtsEnCmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SendDataCmd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_OpenSocketCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_GetRssiCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CloseSocketCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckSimCmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckNetworkCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckGPRSCmd
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_collect_timer_handle
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_mem
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_QIRD
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_FixBaudCmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_AutoBaud
</UL>

<P><STRONG><a name="[2dd]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[2de]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[122]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp2
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[2df]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[119]"></a>__hardfp_atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_iot_sync_shadow_property
</UL>

<P><STRONG><a name="[11c]"></a>__hardfp_exp</STRONG> (Thumb, 714 bytes, Stack size 72 bytes, exp.o(i.__hardfp_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
</UL>

<P><STRONG><a name="[123]"></a>__hardfp_exp2</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, exp2.o(i.__hardfp_exp2))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_exp2 &rArr; exp &rArr; __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modf
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorOpt3001Convert
</UL>

<P><STRONG><a name="[128]"></a>__hardfp_ldexp</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, ldexp.o(i.__hardfp_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ldexp
</UL>

<P><STRONG><a name="[12a]"></a>__hardfp_modf</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, modf.o(i.__hardfp_modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __hardfp_modf &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modf
</UL>

<P><STRONG><a name="[121]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[11d]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp2
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[11e]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp2
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[120]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp2
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[11a]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[2e0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2e1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2e2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[11b]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp2
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>

<P><STRONG><a name="[12b]"></a>_bme280_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rak_spi_bme280.o(i._bme280_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _bme280_init &rArr; stream_sensor_data_normal_mode &rArr; bme280_set_sensor_settings &rArr; put_device_to_sleep &rArr; set_osr_settings &rArr; bme280_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_spi_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_sensor_data_normal_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_init
</UL>

<P><STRONG><a name="[8e]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[4c]"></a>_sensor_collect_timer_handle</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, main.o(i._sensor_collect_timer_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _sensor_collect_timer_handle &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_get_sys_tick
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_level_str
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.sensor_collect_timer_init)
</UL>
<P><STRONG><a name="[55]"></a>_tc_iot_get_message_ack_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tc_iot_shadow_property.o(i._tc_iot_get_message_ack_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 3728<LI>Call Chain = _tc_iot_get_message_ack_callback &rArr; tc_iot_device_on_message_received &rArr; tc_iot_shadow_doc_parse &rArr; _tc_iot_sync_shadow_property &rArr; tc_iot_confirm_devcie_data &rArr; tc_iot_shadow_check_and_report &rArr; tc_iot_mqtt_client_publish &rArr; tc_iot_mqtt_publish &rArr; _handle_reconnect &rArr; tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_device_on_message_received
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tc_iot_shadow_property.o(i.tc_iot_server_init)
</UL>
<P><STRONG><a name="[4d]"></a>_tc_iot_report_message_ack_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tc_iot_shadow_property.o(i._tc_iot_report_message_ack_callback))
<BR>[Address Reference Count : 2]<UL><LI> tc_iot_shadow_property.o(i.tc_iot_confirm_devcie_data)
<LI> tc_iot_shadow_property.o(i.tc_iot_report_device_data)
</UL>
<P><STRONG><a name="[2]"></a>_tc_iot_shadow_property_control_callback</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, tc_iot_device_logic.o(i._tc_iot_shadow_property_control_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = _tc_iot_shadow_property_control_callback &rArr; tc_iot_report_firm &rArr; tc_iot_shadow_update_firm_info &rArr; tc_iot_mqtt_client_publish &rArr; tc_iot_mqtt_publish &rArr; _handle_reconnect &rArr; tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_report_firm
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operate_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tc_iot_device_logic.o(.data)
</UL>
<P><STRONG><a name="[144]"></a>_tc_iot_sync_shadow_property</STRONG> (Thumb, 360 bytes, Stack size 144 bytes, tc_iot_shadow_property.o(i._tc_iot_sync_shadow_property))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = _tc_iot_sync_shadow_property &rArr; tc_iot_confirm_devcie_data &rArr; tc_iot_shadow_check_and_report &rArr; tc_iot_mqtt_client_publish &rArr; tc_iot_mqtt_publish &rArr; _handle_reconnect &rArr; tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_event_notify
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_confirm_devcie_data
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_save_to_cached
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_doc_parse
</UL>

<P><STRONG><a name="[54]"></a>_tc_iot_update_firm_message_ack_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tc_iot_shadow_property.o(i._tc_iot_update_firm_message_ack_callback))
<BR>[Address Reference Count : 1]<UL><LI> tc_iot_shadow_property.o(i.tc_iot_report_firm)
</UL>
<P><STRONG><a name="[286]"></a>_unicode_char_to_long</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, tc_iot_json.o(i._unicode_char_to_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _unicode_char_to_long
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_json_unescape
</UL>

<P><STRONG><a name="[49]"></a>app_error_fault_handler</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_panic
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh.o(i.nrf_sdh_enable_request)
</UL>
<P><STRONG><a name="[98]"></a>app_error_handler_bare</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Uart_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode_enter
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_evt
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_error_handler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handle
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps_Uart_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_UART_TxBuf
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
</UL>

<P><STRONG><a name="[156]"></a>app_fifo_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, app_fifo.o(i.app_fifo_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_fifo_get
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[166]"></a>app_fifo_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_fifo.o(i.app_fifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[158]"></a>app_fifo_put</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, app_fifo.o(i.app_fifo_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_fifo_put
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_put
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[c6]"></a>app_timer_cnt_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_cnt_get))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetQNDI
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_OpenSocketCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckSimCmd
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsm_rxbuf_print
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_mem
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitNewLine
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Wait4Cmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_QIRD
</UL>

<P><STRONG><a name="[17b]"></a>app_timer_create</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_collect_timer_init
</UL>

<P><STRONG><a name="[15a]"></a>app_timer_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = app_timer_init &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15f]"></a>app_timer_start</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_collect_timer_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[162]"></a>app_timer_stop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = app_timer_stop &rArr; timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[ad]"></a>app_uart_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_uart_fifo.o(i.app_uart_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = app_uart_close &rArr; nrf_drv_uart_uninit &rArr; pins_to_default &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Uart_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps_Uart_Init
</UL>

<P><STRONG><a name="[a4]"></a>app_uart_get</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app_uart_fifo.o(i.app_uart_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = app_uart_get &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handle
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuIrqNotify
</UL>

<P><STRONG><a name="[af]"></a>app_uart_init</STRONG> (Thumb, 164 bytes, Stack size 56 bytes, app_uart_fifo.o(i.app_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = app_uart_init &rArr; nrf_drv_uart_rx &rArr; nrf_drv_uart_rx_for_uart &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_enable
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Uart_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps_Uart_Init
</UL>

<P><STRONG><a name="[97]"></a>app_uart_put</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_uart_fifo.o(i.app_uart_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = app_uart_put &rArr; nrf_drv_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_in_progress
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GSM_UART_TxBuf
</UL>

<P><STRONG><a name="[104]"></a>app_util_critical_region_enter</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[106]"></a>app_util_critical_region_exit</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[16e]"></a>ble_advdata_encode</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, ble_advdata.o(i.ble_advdata_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[176]"></a>ble_advdata_set</STRONG> (Thumb, 104 bytes, Stack size 96 bytes, ble_advdata.o(i.ble_advdata_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
</UL>

<P><STRONG><a name="[201]"></a>ble_advertising_conn_cfg_tag_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_advertising.o(i.ble_advertising_conn_cfg_tag_set))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[177]"></a>ble_advertising_init</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_advertising_on_ble_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[65]"></a>ble_advertising_on_sys_evt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_soc_observers1)
</UL>
<P><STRONG><a name="[178]"></a>ble_advertising_start</STRONG> (Thumb, 458 bytes, Stack size 48 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = ble_advertising_start &rArr; ble_advdata_set &rArr; ble_advdata_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_is_busy
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17a]"></a>ble_conn_params_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ble_conn_params.o(i.ble_conn_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_conn_params_init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[186]"></a>ble_nus_init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ble_nus.o(i.ble_nus_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ble_nus_init &rArr; tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_char_add
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>ble_nus_on_ble_evt</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ble_nus.o(i.ble_nus_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_nus_on_ble_evt
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[17e]"></a>ble_srv_is_notification_enabled</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_srv_common.o(i.ble_srv_is_notification_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_on_ble_evt
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[189]"></a>bme280_compensate_data</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, bme280.o(i.bme280_compensate_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = bme280_compensate_data &rArr; compensate_humidity &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_temperature
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_pressure
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compensate_humidity
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_data
</UL>

<P><STRONG><a name="[18d]"></a>bme280_get_regs</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bme280.o(i.bme280_get_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bme280_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_mode
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_mode
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_data
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_settings
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
</UL>

<P><STRONG><a name="[18f]"></a>bme280_get_sensor_data</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, bme280.o(i.bme280_get_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = bme280_get_sensor_data &rArr; bme280_compensate_data &rArr; compensate_humidity &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_parse_sensor_data
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_compensate_data
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bme280_data
</UL>

<P><STRONG><a name="[191]"></a>bme280_get_sensor_mode</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bme280.o(i.bme280_get_sensor_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bme280_get_sensor_mode &rArr; bme280_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_mode
</UL>

<P><STRONG><a name="[12d]"></a>bme280_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bme280.o(i.bme280_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bme280_init &rArr; bme280_soft_reset &rArr; bme280_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_soft_reset
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_calib_data
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bme280_init
</UL>

<P><STRONG><a name="[190]"></a>bme280_parse_sensor_data</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bme280.o(i.bme280_parse_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bme280_parse_sensor_data
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_data
</UL>

<P><STRONG><a name="[194]"></a>bme280_set_regs</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, bme280.o(i.bme280_set_regs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bme280_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_soft_reset
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_mode
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_settings
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings
</UL>

<P><STRONG><a name="[195]"></a>bme280_set_sensor_mode</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bme280.o(i.bme280_set_sensor_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bme280_set_sensor_mode &rArr; put_device_to_sleep &rArr; set_osr_settings &rArr; bme280_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_mode
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_sensor_data_normal_mode
</UL>

<P><STRONG><a name="[197]"></a>bme280_set_sensor_settings</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bme280.o(i.bme280_set_sensor_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bme280_set_sensor_settings &rArr; put_device_to_sleep &rArr; set_osr_settings &rArr; bme280_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_mode
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_settings
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_settings_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stream_sensor_data_normal_mode
</UL>

<P><STRONG><a name="[192]"></a>bme280_soft_reset</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, bme280.o(i.bme280_soft_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = bme280_soft_reset &rArr; bme280_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep
</UL>

<P><STRONG><a name="[12c]"></a>bme280_spi_init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, rak_spi_bme280.o(i.bme280_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bme280_spi_init &rArr; rak_spi_init &rArr; nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_spi_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_spi_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bme280_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_init
</UL>

<P><STRONG><a name="[1a9]"></a>bsp_board_button_idx_to_pin</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, boards.o(i.bsp_board_button_idx_to_pin))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wakeup_button_enable
</UL>

<P><STRONG><a name="[1a8]"></a>bsp_board_led_invert</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, boards.o(i.bsp_board_led_invert))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[19d]"></a>bsp_board_led_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, boards.o(i.bsp_board_led_off))
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
</UL>

<P><STRONG><a name="[19f]"></a>bsp_board_led_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, boards.o(i.bsp_board_led_on))
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
</UL>

<P><STRONG><a name="[1a7]"></a>bsp_board_led_state_get</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, boards.o(i.bsp_board_led_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[1a0]"></a>bsp_board_leds_off</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_leds_off
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
</UL>

<P><STRONG><a name="[1a1]"></a>bsp_board_leds_on</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_leds_on
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[1a4]"></a>bsp_board_pin_to_button_idx</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, boards.o(i.bsp_board_pin_to_button_idx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_pin_to_button_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[1a2]"></a>bsp_btn_ble_sleep_mode_prepare</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.bsp_btn_ble_sleep_mode_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_btn_ble_sleep_mode_prepare &rArr; bsp_wakeup_button_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wakeup_button_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode_enter
</UL>

<P><STRONG><a name="[152]"></a>bsp_event_to_button_action_assign</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, bsp.o(i.bsp_event_to_button_action_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
</UL>

<P><STRONG><a name="[17c]"></a>bsp_indication_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp.o(i.bsp_indication_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode_enter
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[1a3]"></a>bsp_wakeup_button_enable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp.o(i.bsp_wakeup_button_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_wakeup_button_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_button_idx_to_pin
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_sleep_mode_prepare
</UL>

<P><STRONG><a name="[39]"></a>bufchar</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, mqttpacket.o(i.bufchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bufchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqttpacket.o(i.MQTTPacket_decodeBuf)
</UL>
<P><STRONG><a name="[23f]"></a>buffer_is_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.buffer_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[1b1]"></a>cycle</STRONG> (Thumb, 348 bytes, Stack size 96 bytes, tc_iot_mqtt.o(i.cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = cycle &rArr; readPacket &rArr; tc_iot_hal_timer_left_ms &rArr; tc_iot_hal_get_ms &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliverMessage
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPacket
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_packet
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_close_session
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_is_connected
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_yield
</UL>

<P><STRONG><a name="[b4]"></a>delay_ms</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rak_uart_gsm.o(i.delay_ms))
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_PowerUp
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckAutoBaud
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitSendAck
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspTcpConnt
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitNewLine
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Wait4Cmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_QIRD
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_AutoBaud
</UL>

<P><STRONG><a name="[1b3]"></a>deliverMessage</STRONG> (Thumb, 154 bytes, Stack size 64 bytes, tc_iot_mqtt.o(i.deliverMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = deliverMessage &rArr; MQTTPacket_equals &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_equals
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isTopicMatched
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_new_message_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[1ba]"></a>do_rel_data_change</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, app_main.o(i.do_rel_data_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = do_rel_data_change &rArr; tc_iot_report_device_data &rArr; tc_iot_shadow_check_and_report &rArr; tc_iot_mqtt_client_publish &rArr; tc_iot_mqtt_publish &rArr; _handle_reconnect &rArr; tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_report_device_data
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_get_shadow_client
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_io_main
</UL>

<P><STRONG><a name="[d0]"></a>dump_mem</STRONG> (Thumb, 424 bytes, Stack size 192 bytes, rak_uart_gsm.o(i.dump_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_printf_ascii
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gsm_rxbuf_print
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_WaitRspOK
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_QIRD
</UL>

<P><STRONG><a name="[126]"></a>exp</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exp.o(i.exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = exp &rArr; __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp2
</UL>

<P><STRONG><a name="[c1]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetQNDI
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetEchoCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetDnsModeCmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetContextCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetAtsEnCmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SendDataCmd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_OpenSocketCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_GetRssiCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CloseSocketCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckSimCmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckNetworkCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckGPRSCmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_FixBaudCmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_AutoBaud
</UL>

<P><STRONG><a name="[41]"></a>gatt_evt_handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(i.gatt_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gatt_evt_handler &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.gatt_init)
</UL>
<P><STRONG><a name="[1c3]"></a>gatt_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = gatt_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_att_mtu_periph_set
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c6]"></a>get_bme280_data</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, rak_spi_bme280.o(i.get_bme280_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = get_bme280_data &rArr; bme280_get_sensor_data &rArr; bme280_compensate_data &rArr; compensate_humidity &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_data
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_collect_data
</UL>

<P><STRONG><a name="[1c7]"></a>get_lis2mdl_data</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, rak_i2c_lis2mdl.o(i.get_lis2mdl_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_lis2mdl_data &rArr; lis2mdl_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_status_get
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_magnetic_raw_get
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_collect_data
</UL>

<P><STRONG><a name="[1ca]"></a>get_lis3dh_data</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, rak_i2c_lis3dh.o(i.get_lis3dh_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = get_lis3dh_data &rArr; LIS3DH_GetAccAxesRaw &rArr; LIS3DH_ReadReg &rArr; nrf_drv_lis3dh_read_reg &rArr; rak_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_GetAccAxesRaw
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_collect_data
</UL>

<P><STRONG><a name="[1cb]"></a>get_opt3001_data</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, rak_i2c_opt3001.o(i.get_opt3001_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = get_opt3001_data &rArr; sensorOpt3001Read &rArr; sensorReadReg &rArr; rak_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorOpt3001Read
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorOpt3001Convert
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_collect_data
</UL>

<P><STRONG><a name="[a6]"></a>get_stamp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_itracker.o(i.get_stamp))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt3001_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_collect_data
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_collect_timer_handle
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sensor_collect_timer_handle
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuIrqNotify
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Wait4Cmd
</UL>

<P><STRONG><a name="[ce]"></a>gsm_rxbuf_print</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, rak_uart_gsm.o(i.gsm_rxbuf_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = gsm_rxbuf_print &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SendDataCmd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_QIRD
</UL>

<P><STRONG><a name="[1cf]"></a>http_post_urlencoded</STRONG> (Thumb, 176 bytes, Stack size 576 bytes, tc_iot_token.o(i.http_post_urlencoded))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = http_post_urlencoded &rArr; tc_iot_create_post_request &rArr; tc_iot_create_http_request &rArr; tc_iot_http_request_n_append_header &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_create_post_request
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_url_parse
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_refresh_auth_token_with_expire
</UL>

<P><STRONG><a name="[1d2]"></a>http_refresh_auth_token_with_expire</STRONG> (Thumb, 582 bytes, Stack size 3944 bytes, tc_iot_token.o(i.http_refresh_auth_token_with_expire))
<BR><BR>[Stack]<UL><LI>Max Depth = 5520<LI>Call Chain = http_refresh_auth_token_with_expire &rArr; tc_iot_create_auth_request_form &rArr; tc_iot_calc_auth_sign &rArr; tc_iot_hmac_sha256 &rArr; tc_iot_hmac_sha256_init &rArr; tc_iot_sha256_finish &rArr; tc_iot_sha256_update &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_init
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_parse_http_response_code
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_create_auth_request_form
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_post_urlencoded
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_net_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_json_find_token
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_io_main
</UL>

<P><STRONG><a name="[1d7]"></a>jsmn_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jsmn.o(i.jsmn_init))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_refresh_auth_token_with_expire
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_json_parse
</UL>

<P><STRONG><a name="[1d8]"></a>jsmn_parse</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, jsmn.o(i.jsmn_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = jsmn_parse &rArr; jsmn_parse_string &rArr; jsmn_alloc_token
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse_string
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse_primitive
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_alloc_token
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_refresh_auth_token_with_expire
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_json_parse
</UL>

<P><STRONG><a name="[1b4]"></a>keepalive</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tc_iot_mqtt.o(i.keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = keepalive &rArr; _send_packet &rArr; tc_iot_hal_timer_left_ms &rArr; tc_iot_hal_get_ms &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_is_expired
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_countdown_second
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_pingreq
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[127]"></a>ldexp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ldexp.o(i.ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp2
</UL>

<P><STRONG><a name="[1e7]"></a>lis2mdl_block_data_update_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lis2mdl_reg.o(i.lis2mdl_block_data_update_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lis2mdl_block_data_update_set &rArr; lis2mdl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_write_reg
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_init
</UL>

<P><STRONG><a name="[1ea]"></a>lis2mdl_data_rate_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lis2mdl_reg.o(i.lis2mdl_data_rate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lis2mdl_data_rate_set &rArr; lis2mdl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_write_reg
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_init
</UL>

<P><STRONG><a name="[1ed]"></a>lis2mdl_device_id_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lis2mdl_reg.o(i.lis2mdl_device_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lis2mdl_device_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_init
</UL>

<P><STRONG><a name="[1eb]"></a>lis2mdl_init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, rak_i2c_lis2mdl.o(i.lis2mdl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lis2mdl_init &rArr; lis2mdl_twi_init &rArr; rak_i2c_init &rArr; nrf_drv_twi_init &rArr; twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_set_rst_mode_set
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_reset_set
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_reset_get
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_operating_mode_set
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_offset_temp_comp_set
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_device_id_get
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_data_rate_set
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_block_data_update_set
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_twi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_init
</UL>

<P><STRONG><a name="[1c9]"></a>lis2mdl_magnetic_raw_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lis2mdl_reg.o(i.lis2mdl_magnetic_raw_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lis2mdl_magnetic_raw_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lis2mdl_data
</UL>

<P><STRONG><a name="[1f1]"></a>lis2mdl_offset_temp_comp_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lis2mdl_reg.o(i.lis2mdl_offset_temp_comp_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lis2mdl_offset_temp_comp_set &rArr; lis2mdl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_write_reg
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_init
</UL>

<P><STRONG><a name="[1f2]"></a>lis2mdl_operating_mode_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lis2mdl_reg.o(i.lis2mdl_operating_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lis2mdl_operating_mode_set &rArr; lis2mdl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_write_reg
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_init
</UL>

<P><STRONG><a name="[1e8]"></a>lis2mdl_read_reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lis2mdl_reg.o(i.lis2mdl_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lis2mdl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_set_rst_mode_set
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_reset_set
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_reset_get
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_operating_mode_set
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_offset_temp_comp_set
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_data_rate_set
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_block_data_update_set
</UL>

<P><STRONG><a name="[1ef]"></a>lis2mdl_reset_get</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lis2mdl_reg.o(i.lis2mdl_reset_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lis2mdl_reset_get &rArr; lis2mdl_read_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_init
</UL>

<P><STRONG><a name="[1ee]"></a>lis2mdl_reset_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lis2mdl_reg.o(i.lis2mdl_reset_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lis2mdl_reset_set &rArr; lis2mdl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_write_reg
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_init
</UL>

<P><STRONG><a name="[1f0]"></a>lis2mdl_set_rst_mode_set</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lis2mdl_reg.o(i.lis2mdl_set_rst_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lis2mdl_set_rst_mode_set &rArr; lis2mdl_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_write_reg
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_init
</UL>

<P><STRONG><a name="[1c8]"></a>lis2mdl_status_get</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lis2mdl_reg.o(i.lis2mdl_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lis2mdl_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lis2mdl_data
</UL>

<P><STRONG><a name="[1ec]"></a>lis2mdl_twi_init</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, rak_i2c_lis2mdl.o(i.lis2mdl_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lis2mdl_twi_init &rArr; rak_i2c_init &rArr; nrf_drv_twi_init &rArr; twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_i2c_init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_i2c_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_collect_data
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_init
</UL>

<P><STRONG><a name="[1e9]"></a>lis2mdl_write_reg</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lis2mdl_reg.o(i.lis2mdl_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lis2mdl_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_set_rst_mode_set
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_reset_set
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_operating_mode_set
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_offset_temp_comp_set
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_data_rate_set
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_block_data_update_set
</UL>

<P><STRONG><a name="[1f5]"></a>lis3dh_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rak_i2c_lis3dh.o(i.lis3dh_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = lis3dh_init &rArr; LIS3DH_SetODR &rArr; LIS3DH_ReadReg &rArr; nrf_drv_lis3dh_read_reg &rArr; rak_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetODR
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetMode
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetFullScale
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_SetAxis
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_init
</UL>

<P><STRONG><a name="[1f6]"></a>lis3dh_twi_init</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, rak_i2c_lis3dh.o(i.lis3dh_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lis3dh_twi_init &rArr; rak_i2c_init &rArr; nrf_drv_twi_init &rArr; twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_i2c_init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_i2c_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_collect_data
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_init
</UL>

<P><STRONG><a name="[32]"></a>main</STRONG> (Thumb, 364 bytes, Stack size 176 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 5728<LI>Call Chain = main &rArr; tc_io_main &rArr; http_refresh_auth_token_with_expire &rArr; tc_iot_create_auth_request_form &rArr; tc_iot_calc_auth_sign &rArr; tc_iot_hmac_sha256 &rArr; tc_iot_hmac_sha256_init &rArr; tc_iot_sha256_finish &rArr; tc_iot_sha256_update &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_io_main
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_conn_cfg_tag_set
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Uart_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_PowerUp
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Gpio_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsInit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_collect_timer_init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_level_str
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gap_params_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[be]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetQNDI
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetEchoCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetDnsModeCmd
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetContextCmd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SetAtsEnCmd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SendDataCmd
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_OpenSocketCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_GetRssiCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CloseSocketCmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckSimCmd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckNetworkCmd
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CheckGPRSCmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_FixBaudCmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_AutoBaud
</UL>

<P><STRONG><a name="[125]"></a>modf</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, modf.o(i.modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = modf &rArr; __hardfp_modf &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_modf
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp2
</UL>

<P><STRONG><a name="[20a]"></a>nrf_balloc_alloc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_balloc_alloc &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[20b]"></a>nrf_balloc_free</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nrf_balloc.o(i.nrf_balloc_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>

<P><STRONG><a name="[249]"></a>nrf_balloc_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_balloc.o(i.nrf_balloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
</UL>

<P><STRONG><a name="[1c5]"></a>nrf_ble_gatt_att_mtu_periph_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_att_mtu_periph_set))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
</UL>

<P><STRONG><a name="[1c4]"></a>nrf_ble_gatt_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_ble_gatt_init
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_init
</UL>

<P><STRONG><a name="[5f]"></a>nrf_ble_gatt_on_ble_evt</STRONG> (Thumb, 312 bytes, Stack size 112 bytes, nrf_ble_gatt.o(i.nrf_ble_gatt_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = nrf_ble_gatt_on_ble_evt &rArr; on_connected_evt &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[210]"></a>nrf_drv_clock_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_clock_init
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_is_enabled
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[212]"></a>nrf_drv_clock_lfclk_release</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_drv_clock_lfclk_release &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
</UL>

<P><STRONG><a name="[1df]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_state_evt_handler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[d9]"></a>nrf_drv_lis3dh_read_reg</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rak_i2c_lis3dh.o(i.nrf_drv_lis3dh_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = nrf_drv_lis3dh_read_reg &rArr; rak_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_ReadReg
</UL>

<P><STRONG><a name="[df]"></a>nrf_drv_lis3dh_write_reg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rak_i2c_lis3dh.o(i.nrf_drv_lis3dh_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = nrf_drv_lis3dh_write_reg &rArr; rak_i2c_write &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_WriteReg
</UL>

<P><STRONG><a name="[217]"></a>nrf_drv_spi_init</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, nrf_drv_spi.o(i.nrf_drv_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_spi_init
</UL>

<P><STRONG><a name="[21a]"></a>nrf_drv_spi_transfer</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.nrf_drv_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_spi_write
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_spi_read
</UL>

<P><STRONG><a name="[21c]"></a>nrf_drv_spi_uninit</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.nrf_drv_spi_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_spi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_spi_deinit
</UL>

<P><STRONG><a name="[21b]"></a>nrf_drv_spi_xfer</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_drv_spi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>

<P><STRONG><a name="[224]"></a>nrf_drv_twi_disable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_drv_twi_disable))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_uninit
</UL>

<P><STRONG><a name="[25e]"></a>nrf_drv_twi_enable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_drv_twi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_i2c_init
</UL>

<P><STRONG><a name="[21e]"></a>nrf_drv_twi_init</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.nrf_drv_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_twi_init &rArr; twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_i2c_init
</UL>

<P><STRONG><a name="[220]"></a>nrf_drv_twi_rx</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = nrf_drv_twi_rx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_i2c_read
</UL>

<P><STRONG><a name="[222]"></a>nrf_drv_twi_tx</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_i2c_write
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_i2c_read
</UL>

<P><STRONG><a name="[223]"></a>nrf_drv_twi_uninit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.nrf_drv_twi_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_twi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_i2c_deinit
</UL>

<P><STRONG><a name="[221]"></a>nrf_drv_twi_xfer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.nrf_drv_twi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
</UL>

<P><STRONG><a name="[167]"></a>nrf_drv_uart_init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_drv_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nrf_drv_uart_init &rArr; apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[165]"></a>nrf_drv_uart_rx</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nrf_drv_uart_rx &rArr; nrf_drv_uart_rx_for_uart &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uarte
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_is_in_RAM
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[168]"></a>nrf_drv_uart_rx_enable</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_uart_rx_enable &rArr; rx_enable &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_init
</UL>

<P><STRONG><a name="[16a]"></a>nrf_drv_uart_tx</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_drv_uart_tx &rArr; tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx_in_progress
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_is_in_RAM
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_handler
</UL>

<P><STRONG><a name="[169]"></a>nrf_drv_uart_tx_in_progress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_drv_uart_tx_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
</UL>

<P><STRONG><a name="[164]"></a>nrf_drv_uart_uninit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_drv_uart_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_drv_uart_uninit &rArr; pins_to_default &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_to_default
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_get_IRQn
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_close
</UL>

<P><STRONG><a name="[230]"></a>nrf_fprintf</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrf_fprintf.o(i.nrf_fprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[1ae]"></a>nrf_fprintf_buffer_flush</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_fprintf.o(i.nrf_fprintf_buffer_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>

<P><STRONG><a name="[231]"></a>nrf_fprintf_fmt</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, nrf_fprintf_format.o(i.nrf_fprintf_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>

<P><STRONG><a name="[179]"></a>nrf_fstorage_is_busy</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, nrf_fstorage.o(i.nrf_fstorage_is_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_fstorage_is_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[62]"></a>nrf_fstorage_sdh_req_handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sdh_req_handler))
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_req_observers0)
</UL>
<P><STRONG><a name="[69]"></a>nrf_fstorage_sdh_state_handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sdh_state_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_fstorage_sdh_state_handler &rArr; queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[64]"></a>nrf_fstorage_sys_evt_handler</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, nrf_fstorage_sd.o(i.nrf_fstorage_sys_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_fstorage_sd.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[236]"></a>nrf_log_backend_add</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_backend_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrf_log_backend_add &rArr; nrf_log_module_filter_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_filter_get
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[238]"></a>nrf_log_backend_rtt_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_log_backend_rtt_init &rArr; SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_default_backends_init
</UL>

<P><STRONG><a name="[239]"></a>nrf_log_backend_serial_put</STRONG> (Thumb, 210 bytes, Stack size 104 bytes, nrf_log_backend_serial.o(i.nrf_log_backend_serial_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_put
</UL>

<P><STRONG><a name="[25c]"></a>nrf_log_color_id_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_color_id_get))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[1fd]"></a>nrf_log_default_backends_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_log_default_backends.o(i.nrf_log_default_backends_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = nrf_log_default_backends_init &rArr; nrf_log_backend_add &rArr; nrf_log_module_filter_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_rtt_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>nrf_log_frontend_dequeue</STRONG> (Thumb, 414 bytes, Stack size 48 bytes, nrf_log_frontend.o(i.nrf_log_frontend_dequeue))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_is_empty
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_get
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[153]"></a>nrf_log_frontend_std_0</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nrf_log_frontend_std_0 &rArr; std_n &rArr; buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[20f]"></a>nrf_log_frontend_std_1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_log_frontend_std_1 &rArr; std_n &rArr; buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_exchange_mtu_request_evt
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
</UL>

<P><STRONG><a name="[1c2]"></a>nrf_log_frontend_std_2</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_frontend_std_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = nrf_log_frontend_std_2 &rArr; std_n &rArr; buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gatt_evt_handler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected_evt
</UL>

<P><STRONG><a name="[23d]"></a>nrf_log_hexdump_entry_process</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, nrf_log_str_formatter.o(i.nrf_log_hexdump_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = nrf_log_hexdump_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[1fc]"></a>nrf_log_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_log_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_init &rArr; nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_pool_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[207]"></a>nrf_log_module_cnt_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_log_frontend.o(i.nrf_log_module_cnt_get))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
</UL>

<P><STRONG><a name="[237]"></a>nrf_log_module_filter_get</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.nrf_log_module_filter_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_log_module_filter_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_add
</UL>

<P><STRONG><a name="[246]"></a>nrf_log_module_name_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_module_name_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = nrf_log_module_name_get &rArr; module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;module_idx_get
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
</UL>

<P><STRONG><a name="[154]"></a>nrf_log_panic</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_log_frontend.o(i.nrf_log_panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_log_panic
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>

<P><STRONG><a name="[23c]"></a>nrf_log_std_entry_process</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, nrf_log_str_formatter.o(i.nrf_log_std_entry_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prefix_process
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;postfix_process
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[240]"></a>nrf_memobj_alloc</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_alloc
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[247]"></a>nrf_memobj_free</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, nrf_memobj.o(i.nrf_memobj_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_free
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_put
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_alloc
</UL>

<P><STRONG><a name="[23a]"></a>nrf_memobj_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_memobj.o(i.nrf_memobj_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_memobj_get
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_add
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[245]"></a>nrf_memobj_pool_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf_memobj.o(i.nrf_memobj_pool_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_memobj_pool_init &rArr; nrf_balloc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_balloc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_init
</UL>

<P><STRONG><a name="[23e]"></a>nrf_memobj_put</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = nrf_memobj_put &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_free
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___12_nrf_memobj_c_9bb9f865__nrf_atomic_internal_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[23b]"></a>nrf_memobj_read</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_memobj_read &rArr; memobj_op &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>

<P><STRONG><a name="[241]"></a>nrf_memobj_write</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, nrf_memobj.o(i.nrf_memobj_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_memobj_write &rArr; memobj_op &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memobj_op
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
</UL>

<P><STRONG><a name="[24b]"></a>nrf_sdh_ble_app_ram_start_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_app_ram_start_get))
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
</UL>

<P><STRONG><a name="[1ff]"></a>nrf_sdh_ble_default_cfg_set</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_default_cfg_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = nrf_sdh_ble_default_cfg_set &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_app_ram_start_get
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[200]"></a>nrf_sdh_ble_enable</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = nrf_sdh_ble_enable &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24f]"></a>nrf_sdh_disable_request</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, nrf_sdh.o(i.nrf_sdh_disable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_sdh_disable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[1fe]"></a>nrf_sdh_enable_request</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nrf_sdh.o(i.nrf_sdh_enable_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_sdh_enable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_request_continue
</UL>

<P><STRONG><a name="[112]"></a>nrf_sdh_evts_poll</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_sdh.o(i.nrf_sdh_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_sdh_evts_poll &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
</UL>

<P><STRONG><a name="[211]"></a>nrf_sdh_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_sdh_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[233]"></a>nrf_sdh_request_continue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_sdh.o(i.nrf_sdh_request_continue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_sdh_request_continue &rArr; nrf_sdh_enable_request &rArr; sdh_state_observer_notify &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>

<P><STRONG><a name="[24d]"></a>nrf_section_iter_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_section_iter.o(i.nrf_section_iter_init))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[24e]"></a>nrf_section_iter_next</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_section_iter.o(i.nrf_section_iter_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_soc_evts_poll
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_evts_poll
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_evts_poll
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_state_observer_notify
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdh_request_observer_notify
</UL>

<P><STRONG><a name="[255]"></a>nrf_strerror_find</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nrf_strerror.o(i.nrf_strerror_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_get
</UL>

<P><STRONG><a name="[24c]"></a>nrf_strerror_get</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, nrf_strerror.o(i.nrf_strerror_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_strerror_get &rArr; nrf_strerror_find
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_strerror_find
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_enable
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_ble_default_cfg_set
</UL>

<P><STRONG><a name="[142]"></a>operate_device</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_main.o(i.operate_device))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_iot_shadow_property_control_callback
</UL>

<P><STRONG><a name="[257]"></a>opt3001_get_id</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sensor_opt3001.o(i.opt3001_get_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = opt3001_get_id &rArr; sensorReadReg &rArr; rak_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt3001_init
</UL>

<P><STRONG><a name="[259]"></a>opt3001_init</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, rak_i2c_opt3001.o(i.opt3001_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = opt3001_init &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorOpt3001Enable
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt3001_get_id
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_init
</UL>

<P><STRONG><a name="[25b]"></a>opt3001_twi_init</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, rak_i2c_opt3001.o(i.opt3001_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = opt3001_twi_init &rArr; rak_i2c_init &rArr; nrf_drv_twi_init &rArr; twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_i2c_init
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_i2c_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_collect_data
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_init
</UL>

<P><STRONG><a name="[1f3]"></a>rak_i2c_deinit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rak_i2c_sensor.o(i.rak_i2c_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rak_i2c_deinit &rArr; nrf_drv_twi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt3001_twi_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis3dh_twi_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_twi_init
</UL>

<P><STRONG><a name="[1f4]"></a>rak_i2c_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rak_i2c_sensor.o(i.rak_i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rak_i2c_init &rArr; nrf_drv_twi_init &rArr; twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt3001_twi_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis3dh_twi_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_twi_init
</UL>

<P><STRONG><a name="[214]"></a>rak_i2c_read</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, rak_i2c_sensor.o(i.rak_i2c_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = rak_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_read
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorReadReg
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_lis3dh_read_reg
</UL>

<P><STRONG><a name="[215]"></a>rak_i2c_write</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rak_i2c_sensor.o(i.rak_i2c_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = rak_i2c_write &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_tx
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;platform_write
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorWriteReg
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_lis3dh_write_reg
</UL>

<P><STRONG><a name="[19b]"></a>rak_spi_deinit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rak_spi_sensor.o(i.rak_spi_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rak_spi_deinit &rArr; nrf_drv_spi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_spi_init
</UL>

<P><STRONG><a name="[19c]"></a>rak_spi_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rak_spi_sensor.o(i.rak_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rak_spi_init &rArr; nrf_drv_spi_init &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_spi_init
</UL>

<P><STRONG><a name="[25f]"></a>rak_spi_read</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, rak_spi_sensor.o(i.rak_spi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rak_spi_read &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_spi_read
</UL>

<P><STRONG><a name="[260]"></a>rak_spi_write</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, rak_spi_sensor.o(i.rak_spi_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rak_spi_write &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_spi_write
</UL>

<P><STRONG><a name="[e1]"></a>readChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqttpacket.o(i.readChar))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>

<P><STRONG><a name="[e3]"></a>readInt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, mqttpacket.o(i.readInt))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMQTTLenString
</UL>

<P><STRONG><a name="[e6]"></a>readMQTTLenString</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, mqttpacket.o(i.readMQTTLenString))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = readMQTTLenString
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
</UL>

<P><STRONG><a name="[13e]"></a>rtc1_get_sys_tick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tc_iot_hal_timer.o(i.rtc1_get_sys_tick))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sensor_collect_timer_handle
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_random
</UL>

<P><STRONG><a name="[183]"></a>sdk_mapped_flags_bulk_update_by_key</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_bulk_update_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[184]"></a>sdk_mapped_flags_first_key_index_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_first_key_index_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdk_mapped_flags_first_key_index_get
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[182]"></a>sdk_mapped_flags_key_list_get</STRONG> (Thumb, 74 bytes, Stack size 96 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_key_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sdk_mapped_flags_key_list_get &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[185]"></a>sdk_mapped_flags_update_by_key</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_update_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[1cd]"></a>sensorOpt3001Convert</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, sensor_opt3001.o(i.sensorOpt3001Convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sensorOpt3001Convert &rArr; __hardfp_exp2 &rArr; exp &rArr; __hardfp_exp &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp2
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_opt3001_data
</UL>

<P><STRONG><a name="[25a]"></a>sensorOpt3001Enable</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sensor_opt3001.o(i.sensorOpt3001Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = sensorOpt3001Enable &rArr; sensorWriteReg &rArr; rak_i2c_write &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt3001_init
</UL>

<P><STRONG><a name="[1cc]"></a>sensorOpt3001Read</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sensor_opt3001.o(i.sensorOpt3001Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = sensorOpt3001Read &rArr; sensorReadReg &rArr; rak_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_opt3001_data
</UL>

<P><STRONG><a name="[258]"></a>sensorReadReg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rak_i2c_opt3001.o(i.sensorReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = sensorReadReg &rArr; rak_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_i2c_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorOpt3001Read
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt3001_get_id
</UL>

<P><STRONG><a name="[263]"></a>sensorWriteReg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rak_i2c_opt3001.o(i.sensorWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = sensorWriteReg &rArr; rak_i2c_write &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_i2c_write
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorOpt3001Enable
</UL>

<P><STRONG><a name="[264]"></a>sensor_collect_timer_handle</STRONG> (Thumb, 204 bytes, Stack size 112 bytes, main.o(i.sensor_collect_timer_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sensor_collect_timer_handle &rArr; start_collect_data &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_collect_data
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_level_str
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_io_main
</UL>

<P><STRONG><a name="[203]"></a>sensor_collect_timer_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.sensor_collect_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sensor_collect_timer_init &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[202]"></a>sensors_init</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, main.o(i.sensors_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = sensors_init &rArr; opt3001_init &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt3001_twi_init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt3001_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis3dh_twi_init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis3dh_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_twi_init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_spi_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bme280_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_level_str
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>spi_event_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rak_spi_sensor.o(i.spi_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> rak_spi_sensor.o(i.rak_spi_init)
</UL>
<P><STRONG><a name="[265]"></a>start_collect_data</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, main.o(i.start_collect_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = start_collect_data &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt3001_twi_init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis3dh_twi_init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lis2mdl_twi_init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_opt3001_data
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lis3dh_data
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lis2mdl_data
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bme280_data
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_level_str
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_collect_timer_handle
</UL>

<P><STRONG><a name="[12e]"></a>stream_sensor_data_normal_mode</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rak_spi_bme280.o(i.stream_sensor_data_normal_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = stream_sensor_data_normal_mode &rArr; bme280_set_sensor_settings &rArr; put_device_to_sleep &rArr; set_osr_settings &rArr; bme280_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_bme280_init
</UL>

<P><STRONG><a name="[204]"></a>tc_io_main</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, app_main.o(i.tc_io_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 5552<LI>Call Chain = tc_io_main &rArr; http_refresh_auth_token_with_expire &rArr; tc_iot_create_auth_request_form &rArr; tc_iot_calc_auth_sign &rArr; tc_iot_hmac_sha256 &rArr; tc_iot_hmac_sha256_init &rArr; tc_iot_sha256_finish &rArr; tc_iot_sha256_update &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_collect_timer_handle
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_server_loop
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_server_init
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_server_destroy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_refresh_auth_token_with_expire
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timestamp
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_sleep_ms
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_get_shadow_client
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rel_data_change
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_srandom
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_random
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[270]"></a>tc_iot_base64_encode</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, tc_iot_base64.o(i.tc_iot_base64_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tc_iot_base64_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_calc_auth_sign
</UL>

<P><STRONG><a name="[26e]"></a>tc_iot_calc_auth_sign</STRONG> (Thumb, 228 bytes, Stack size 744 bytes, tc_iot_http_utils.o(i.tc_iot_calc_auth_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = tc_iot_calc_auth_sign &rArr; tc_iot_hmac_sha256 &rArr; tc_iot_hmac_sha256_init &rArr; tc_iot_sha256_finish &rArr; tc_iot_sha256_update &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_url_encode
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hmac_sha256
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_base64_encode
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_create_auth_request_form
</UL>

<P><STRONG><a name="[148]"></a>tc_iot_confirm_devcie_data</STRONG> (Thumb, 66 bytes, Stack size 544 bytes, tc_iot_shadow_property.o(i.tc_iot_confirm_devcie_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = tc_iot_confirm_devcie_data &rArr; tc_iot_shadow_check_and_report &rArr; tc_iot_mqtt_client_publish &rArr; tc_iot_mqtt_publish &rArr; _handle_reconnect &rArr; tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_check_and_report
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_iot_sync_shadow_property
</UL>

<P><STRONG><a name="[27a]"></a>tc_iot_copy_net_context</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tc_iot_hal_net.o(i.tc_iot_copy_net_context))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_net_init
</UL>

<P><STRONG><a name="[1d3]"></a>tc_iot_create_auth_request_form</STRONG> (Thumb, 212 bytes, Stack size 104 bytes, tc_iot_http_utils.o(i.tc_iot_create_auth_request_form))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = tc_iot_create_auth_request_form &rArr; tc_iot_calc_auth_sign &rArr; tc_iot_hmac_sha256 &rArr; tc_iot_hmac_sha256_init &rArr; tc_iot_sha256_finish &rArr; tc_iot_sha256_update &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_left
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_current
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_calc_auth_sign
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_url_long_field
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_tc_iot_url_encoded_field
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_refresh_auth_token_with_expire
</UL>

<P><STRONG><a name="[272]"></a>tc_iot_create_http_request</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, tc_iot_http_utils.o(i.tc_iot_create_http_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tc_iot_create_http_request &rArr; tc_iot_http_request_n_append_header &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_n_append_header
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_init
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_append_header
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_append_body
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_create_post_request
</UL>

<P><STRONG><a name="[1d1]"></a>tc_iot_create_post_request</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, tc_iot_http_utils.o(i.tc_iot_create_post_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tc_iot_create_post_request &rArr; tc_iot_create_http_request &rArr; tc_iot_http_request_n_append_header &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_create_http_request
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_post_urlencoded
</UL>

<P><STRONG><a name="[1]"></a>tc_iot_device_on_message_received</STRONG> (Thumb, 162 bytes, Stack size 2456 bytes, tc_iot_shadow_property.o(i.tc_iot_device_on_message_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 3728<LI>Call Chain = tc_iot_device_on_message_received &rArr; tc_iot_shadow_doc_parse &rArr; _tc_iot_sync_shadow_property &rArr; tc_iot_confirm_devcie_data &rArr; tc_iot_shadow_check_and_report &rArr; tc_iot_mqtt_client_publish &rArr; tc_iot_mqtt_publish &rArr; _handle_reconnect &rArr; tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_event_notify
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_doc_parse
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_json_parse
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_json_find_token
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_iot_get_message_ack_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tc_iot_device_logic.o(.data)
</UL>
<P><STRONG><a name="[278]"></a>tc_iot_find_empty_session</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tc_iot_shadow.o(i.tc_iot_find_empty_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tc_iot_find_empty_session
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_update_firm_info
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_get
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_check_and_report
</UL>

<P><STRONG><a name="[1bc]"></a>tc_iot_get_shadow_client</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tc_iot_device_logic.o(i.tc_iot_get_shadow_client))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_io_main
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rel_data_change
</UL>

<P><STRONG><a name="[279]"></a>tc_iot_hal_get_ms</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tc_iot_hal_timer.o(i.tc_iot_hal_get_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tc_iot_hal_get_ms &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_left_ms
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_is_expired
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_init
</UL>

<P><STRONG><a name="[50]"></a>tc_iot_hal_net_connect</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, tc_iot_hal_net.o(i.tc_iot_hal_net_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = tc_iot_hal_net_connect &rArr; Gsm_OpenSocketCmd &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_OpenSocketCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CloseSocketCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tc_iot_hal_net.o(i.tc_iot_hal_net_init)
</UL>
<P><STRONG><a name="[53]"></a>tc_iot_hal_net_destroy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tc_iot_hal_net.o(i.tc_iot_hal_net_destroy))
<BR>[Address Reference Count : 1]<UL><LI> tc_iot_hal_net.o(i.tc_iot_hal_net_init)
</UL>
<P><STRONG><a name="[51]"></a>tc_iot_hal_net_disconnect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tc_iot_hal_net.o(i.tc_iot_hal_net_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = tc_iot_hal_net_disconnect &rArr; Gsm_CloseSocketCmd &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_CloseSocketCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tc_iot_hal_net.o(i.tc_iot_hal_net_init)
</UL>
<P><STRONG><a name="[1d4]"></a>tc_iot_hal_net_init</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, tc_iot_hal_net.o(i.tc_iot_hal_net_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tc_iot_hal_net_init
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_copy_net_context
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_refresh_auth_token_with_expire
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_init
</UL>

<P><STRONG><a name="[52]"></a>tc_iot_hal_net_is_connected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tc_iot_hal_net.o(i.tc_iot_hal_net_is_connected))
<BR>[Address Reference Count : 1]<UL><LI> tc_iot_hal_net.o(i.tc_iot_hal_net_init)
</UL>
<P><STRONG><a name="[4e]"></a>tc_iot_hal_net_read</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, tc_iot_hal_net.o(i.tc_iot_hal_net_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = tc_iot_hal_net_read &rArr; Gsm_RecvData2 &rArr; Gsm_QIRD &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_RecvData2
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_is_expired
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_countdown_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tc_iot_hal_net.o(i.tc_iot_hal_net_init)
</UL>
<P><STRONG><a name="[4f]"></a>tc_iot_hal_net_write</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tc_iot_hal_net.o(i.tc_iot_hal_net_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = tc_iot_hal_net_write &rArr; Gsm_SendDataCmd &rArr; Gsm_WaitRspOK &rArr; dump_mem &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_SendDataCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tc_iot_hal_net.o(i.tc_iot_hal_net_init)
</UL>
<P><STRONG><a name="[269]"></a>tc_iot_hal_random</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tc_iot_hal_os.o(i.tc_iot_hal_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tc_iot_hal_random &rArr; tc_iot_random
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_random
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_io_main
</UL>

<P><STRONG><a name="[26c]"></a>tc_iot_hal_sleep_ms</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tc_iot_hal_os.o(i.tc_iot_hal_sleep_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tc_iot_hal_sleep_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_io_main
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_yield
</UL>

<P><STRONG><a name="[268]"></a>tc_iot_hal_srandom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tc_iot_hal_os.o(i.tc_iot_hal_srandom))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_io_main
</UL>

<P><STRONG><a name="[137]"></a>tc_iot_hal_timer_countdown_ms</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tc_iot_hal_timer.o(i.tc_iot_hal_timer_countdown_ms))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_net_read
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_update_firm_info
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_get
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_check_and_report
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_subscribe_with_results
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_reconnect
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_connect_with_results
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_reconnect
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_yield
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_publish
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_disconnect
</UL>

<P><STRONG><a name="[13c]"></a>tc_iot_hal_timer_countdown_second</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tc_iot_hal_timer.o(i.tc_iot_hal_timer_countdown_second))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_reconnect
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_connect_with_results
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPacket
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_packet
</UL>

<P><STRONG><a name="[27b]"></a>tc_iot_hal_timer_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tc_iot_hal_timer.o(i.tc_iot_hal_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tc_iot_hal_timer_init &rArr; tc_iot_hal_get_ms &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_get_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_net_read
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_update_firm_info
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_get
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_check_and_report
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_subscribe_with_results
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_reconnect
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_connect_with_results
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_yield
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_publish
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_disconnect
</UL>

<P><STRONG><a name="[134]"></a>tc_iot_hal_timer_is_expired</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tc_iot_hal_timer.o(i.tc_iot_hal_timer_is_expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tc_iot_hal_timer_is_expired &rArr; tc_iot_hal_get_ms &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_get_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_net_read
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_yield
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_packet
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_reconnect
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_yield
</UL>

<P><STRONG><a name="[13d]"></a>tc_iot_hal_timer_left_ms</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tc_iot_hal_timer.o(i.tc_iot_hal_timer_left_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tc_iot_hal_timer_left_ms &rArr; tc_iot_hal_get_ms &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_get_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPacket
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_packet
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_yield
</UL>

<P><STRONG><a name="[267]"></a>tc_iot_hal_timestamp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tc_iot_hal_os.o(i.tc_iot_hal_timestamp))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_io_main
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_init
</UL>

<P><STRONG><a name="[26f]"></a>tc_iot_hmac_sha256</STRONG> (Thumb, 124 bytes, Stack size 256 bytes, tc_iot_hmac.o(i.tc_iot_hmac_sha256))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = tc_iot_hmac_sha256 &rArr; tc_iot_hmac_sha256_init &rArr; tc_iot_sha256_finish &rArr; tc_iot_sha256_update &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_sha256_update
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_sha256_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_sha256_finish
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hmac_sha256_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_calc_auth_sign
</UL>

<P><STRONG><a name="[276]"></a>tc_iot_http_request_append_body</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tc_iot_http_utils.o(i.tc_iot_http_request_append_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tc_iot_http_request_append_body &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_left
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_forward
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_current
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_create_http_request
</UL>

<P><STRONG><a name="[274]"></a>tc_iot_http_request_append_header</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, tc_iot_http_utils.o(i.tc_iot_http_request_append_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tc_iot_http_request_append_header &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_left
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_forward
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_current
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_create_http_request
</UL>

<P><STRONG><a name="[273]"></a>tc_iot_http_request_init</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, tc_iot_http_utils.o(i.tc_iot_http_request_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tc_iot_http_request_init &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_reset
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_left
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_forward
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_current
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_create_http_request
</UL>

<P><STRONG><a name="[275]"></a>tc_iot_http_request_n_append_header</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, tc_iot_http_utils.o(i.tc_iot_http_request_n_append_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tc_iot_http_request_n_append_header &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_left
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_forward
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_current
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_create_http_request
</UL>

<P><STRONG><a name="[283]"></a>tc_iot_init_mqtt_conn_data</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tc_iot_mqtt.o(i.tc_iot_init_mqtt_conn_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tc_iot_init_mqtt_conn_data
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_connect_with_results
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_client_connect
</UL>

<P><STRONG><a name="[2ad]"></a>tc_iot_json_escape</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, tc_iot_json.o(i.tc_iot_json_escape))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tc_iot_json_escape
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_update_firm_info
</UL>

<P><STRONG><a name="[140]"></a>tc_iot_json_find_token</STRONG> (Thumb, 230 bytes, Stack size 64 bytes, tc_iot_json.o(i.tc_iot_json_find_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = tc_iot_json_find_token &rArr; tc_iot_json_unescape &rArr; tc_iot_unicode_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_jsoneq_len
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_json_unescape
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_doc_parse
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_device_on_message_received
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_refresh_auth_token_with_expire
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_iot_shadow_on_message_received
</UL>

<P><STRONG><a name="[13f]"></a>tc_iot_json_parse</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, tc_iot_json.o(i.tc_iot_json_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tc_iot_json_parse &rArr; jsmn_parse &rArr; jsmn_parse_string &rArr; jsmn_alloc_token
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_init
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_doc_parse
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_device_on_message_received
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_iot_shadow_on_message_received
</UL>

<P><STRONG><a name="[285]"></a>tc_iot_json_unescape</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, tc_iot_json.o(i.tc_iot_json_unescape))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = tc_iot_json_unescape &rArr; tc_iot_unicode_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_unicode_to_utf8
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_unicode_char_to_long
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_json_find_token
</UL>

<P><STRONG><a name="[284]"></a>tc_iot_jsoneq_len</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tc_iot_json.o(i.tc_iot_jsoneq_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tc_iot_jsoneq_len &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_json_find_token
</UL>

<P><STRONG><a name="[288]"></a>tc_iot_mqtt_client_connect</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tc_iot_client.o(i.tc_iot_mqtt_client_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = tc_iot_mqtt_client_connect &rArr; tc_iot_mqtt_connect &rArr; tc_iot_mqtt_connect_with_results &rArr; waitfor &rArr; cycle &rArr; readPacket &rArr; tc_iot_hal_timer_left_ms &rArr; tc_iot_hal_get_ms &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_connect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_init_mqtt_conn_data
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_client_is_connected
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_client_construct
</UL>

<P><STRONG><a name="[28b]"></a>tc_iot_mqtt_client_construct</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tc_iot_client.o(i.tc_iot_mqtt_client_construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = tc_iot_mqtt_client_construct &rArr; tc_iot_mqtt_client_connect &rArr; tc_iot_mqtt_connect &rArr; tc_iot_mqtt_connect_with_results &rArr; waitfor &rArr; cycle &rArr; readPacket &rArr; tc_iot_hal_timer_left_ms &rArr; tc_iot_hal_get_ms &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_init
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_client_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_construct
</UL>

<P><STRONG><a name="[28d]"></a>tc_iot_mqtt_client_disconnect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tc_iot_client.o(i.tc_iot_mqtt_client_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tc_iot_mqtt_client_disconnect &rArr; tc_iot_mqtt_disconnect &rArr; _send_packet &rArr; tc_iot_hal_timer_left_ms &rArr; tc_iot_hal_get_ms &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_destroy
</UL>

<P><STRONG><a name="[289]"></a>tc_iot_mqtt_client_is_connected</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tc_iot_client.o(i.tc_iot_mqtt_client_is_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tc_iot_mqtt_client_is_connected
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_is_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_client_connect
</UL>

<P><STRONG><a name="[28e]"></a>tc_iot_mqtt_client_publish</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tc_iot_client.o(i.tc_iot_mqtt_client_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = tc_iot_mqtt_client_publish &rArr; tc_iot_mqtt_publish &rArr; _handle_reconnect &rArr; tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_publish
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_update_firm_info
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_get
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_check_and_report
</UL>

<P><STRONG><a name="[290]"></a>tc_iot_mqtt_client_subscribe</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tc_iot_client.o(i.tc_iot_mqtt_client_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = tc_iot_mqtt_client_subscribe &rArr; tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_subscribe
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_construct
</UL>

<P><STRONG><a name="[291]"></a>tc_iot_mqtt_client_yield</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tc_iot_client.o(i.tc_iot_mqtt_client_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tc_iot_mqtt_client_yield &rArr; tc_iot_mqtt_yield &rArr; _handle_reconnect &rArr; tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_yield
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_yield
</UL>

<P><STRONG><a name="[28a]"></a>tc_iot_mqtt_connect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tc_iot_mqtt.o(i.tc_iot_mqtt_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = tc_iot_mqtt_connect &rArr; tc_iot_mqtt_connect_with_results &rArr; waitfor &rArr; cycle &rArr; readPacket &rArr; tc_iot_hal_timer_left_ms &rArr; tc_iot_hal_get_ms &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_connect_with_results
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_client_connect
</UL>

<P><STRONG><a name="[293]"></a>tc_iot_mqtt_connect_with_results</STRONG> (Thumb, 262 bytes, Stack size 120 bytes, tc_iot_mqtt.o(i.tc_iot_mqtt_connect_with_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = tc_iot_mqtt_connect_with_results &rArr; waitfor &rArr; cycle &rArr; readPacket &rArr; tc_iot_hal_timer_left_ms &rArr; tc_iot_hal_get_ms &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_countdown_second
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_countdown_ms
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_set_state
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_packet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_is_connected
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_disconnect
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_init_mqtt_conn_data
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_connect
</UL>

<P><STRONG><a name="[1b5]"></a>tc_iot_mqtt_disconnect</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tc_iot_mqtt.o(i.tc_iot_mqtt_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tc_iot_mqtt_disconnect &rArr; _send_packet &rArr; tc_iot_hal_timer_left_ms &rArr; tc_iot_hal_get_ms &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_countdown_ms
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_disconnect
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_set_state
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_packet
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_close_session
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_is_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_subscribe_with_results
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_reconnect
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_connect_with_results
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_publish
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_client_disconnect
</UL>

<P><STRONG><a name="[131]"></a>tc_iot_mqtt_get_auto_reconnect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tc_iot_mqtt.o(i.tc_iot_mqtt_get_auto_reconnect))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_reconnect
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_connection
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_yield
</UL>

<P><STRONG><a name="[297]"></a>tc_iot_mqtt_get_state</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tc_iot_mqtt.o(i.tc_iot_mqtt_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_reconnect
</UL>

<P><STRONG><a name="[28c]"></a>tc_iot_mqtt_init</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, tc_iot_mqtt.o(i.tc_iot_mqtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tc_iot_mqtt_init &rArr; tc_iot_hal_timer_init &rArr; tc_iot_hal_get_ms &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timestamp
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_net_init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_set_state
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_client_construct
</UL>

<P><STRONG><a name="[130]"></a>tc_iot_mqtt_is_connected</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tc_iot_mqtt.o(i.tc_iot_mqtt_is_connected))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_subscribe_with_results
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_reconnect
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_connect_with_results
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_connection
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_yield
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_publish
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_disconnect
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_client_is_connected
</UL>

<P><STRONG><a name="[28f]"></a>tc_iot_mqtt_publish</STRONG> (Thumb, 264 bytes, Stack size 72 bytes, tc_iot_mqtt.o(i.tc_iot_mqtt_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = tc_iot_mqtt_publish &rArr; _handle_reconnect &rArr; tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_countdown_ms
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_packet
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_reconnect
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_next_pack_id
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_close_session
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_connection
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_is_connected
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_client_publish
</UL>

<P><STRONG><a name="[135]"></a>tc_iot_mqtt_reconnect</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, tc_iot_mqtt.o(i.tc_iot_mqtt_reconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tc_iot_mqtt_reconnect &rArr; waitfor &rArr; cycle &rArr; readPacket &rArr; tc_iot_hal_timer_left_ms &rArr; tc_iot_hal_get_ms &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_countdown_second
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_countdown_ms
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_set_state
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_get_state
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_packet
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_is_connected
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_reconnect
</UL>

<P><STRONG><a name="[298]"></a>tc_iot_mqtt_set_message_handler</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, tc_iot_mqtt.o(i.tc_iot_mqtt_set_message_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tc_iot_mqtt_set_message_handler &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_subscribe_with_results
</UL>

<P><STRONG><a name="[295]"></a>tc_iot_mqtt_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tc_iot_mqtt.o(i.tc_iot_mqtt_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_reconnect
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_connect_with_results
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_disconnect
</UL>

<P><STRONG><a name="[136]"></a>tc_iot_mqtt_subscribe</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, tc_iot_mqtt.o(i.tc_iot_mqtt_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_subscribe_with_results
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_reconnect
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_client_subscribe
</UL>

<P><STRONG><a name="[29a]"></a>tc_iot_mqtt_subscribe_with_results</STRONG> (Thumb, 262 bytes, Stack size 96 bytes, tc_iot_mqtt.o(i.tc_iot_mqtt_subscribe_with_results))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + In Cycle
<LI>Call Chain = tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_countdown_ms
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_set_message_handler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_packet
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_reconnect
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_next_pack_id
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_close_session
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_connection
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_is_connected
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_subscribe
</UL>

<P><STRONG><a name="[292]"></a>tc_iot_mqtt_yield</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, tc_iot_mqtt.o(i.tc_iot_mqtt_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = tc_iot_mqtt_yield &rArr; _handle_reconnect &rArr; tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_left_ms
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_is_expired
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_countdown_ms
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_sleep_ms
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_get_auto_reconnect
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_reconnect
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_is_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_client_yield
</UL>

<P><STRONG><a name="[1d6]"></a>tc_iot_parse_http_response_code</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tc_iot_http_utils.o(i.tc_iot_parse_http_response_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tc_iot_parse_http_response_code &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_refresh_auth_token_with_expire
</UL>

<P><STRONG><a name="[27c]"></a>tc_iot_random</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tc_iot_hal_os.o(i.tc_iot_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tc_iot_random
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_get_sys_tick
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DJB_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_random
</UL>

<P><STRONG><a name="[141]"></a>tc_iot_release_session</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tc_iot_shadow.o(i.tc_iot_release_session))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_yield
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_update_firm_info
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_check_and_report
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_iot_shadow_on_message_received
</UL>

<P><STRONG><a name="[1bd]"></a>tc_iot_report_device_data</STRONG> (Thumb, 34 bytes, Stack size 528 bytes, tc_iot_shadow_property.o(i.tc_iot_report_device_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = tc_iot_report_device_data &rArr; tc_iot_shadow_check_and_report &rArr; tc_iot_mqtt_client_publish &rArr; tc_iot_mqtt_publish &rArr; _handle_reconnect &rArr; tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_check_and_report
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_server_init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_rel_data_change
</UL>

<P><STRONG><a name="[143]"></a>tc_iot_report_firm</STRONG> (Thumb, 42 bytes, Stack size 544 bytes, tc_iot_shadow_property.o(i.tc_iot_report_firm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = tc_iot_report_firm &rArr; tc_iot_shadow_update_firm_info &rArr; tc_iot_mqtt_client_publish &rArr; tc_iot_mqtt_publish &rArr; _handle_reconnect &rArr; tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_update_firm_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_iot_shadow_property_control_callback
</UL>

<P><STRONG><a name="[26d]"></a>tc_iot_server_destroy</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tc_iot_shadow_property.o(i.tc_iot_server_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tc_iot_server_destroy &rArr; tc_iot_shadow_destroy &rArr; tc_iot_mqtt_client_disconnect &rArr; tc_iot_mqtt_disconnect &rArr; _send_packet &rArr; tc_iot_hal_timer_left_ms &rArr; tc_iot_hal_get_ms &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_io_main
</UL>

<P><STRONG><a name="[26a]"></a>tc_iot_server_init</STRONG> (Thumb, 68 bytes, Stack size 152 bytes, tc_iot_shadow_property.o(i.tc_iot_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = tc_iot_server_init &rArr; tc_iot_report_device_data &rArr; tc_iot_shadow_check_and_report &rArr; tc_iot_mqtt_client_publish &rArr; tc_iot_mqtt_publish &rArr; _handle_reconnect &rArr; tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_event_notify
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_report_device_data
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_yield
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_get
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_io_main
</UL>

<P><STRONG><a name="[26b]"></a>tc_iot_server_loop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tc_iot_shadow_property.o(i.tc_iot_server_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tc_iot_server_loop &rArr; tc_iot_shadow_yield &rArr; tc_iot_mqtt_client_yield &rArr; tc_iot_mqtt_yield &rArr; _handle_reconnect &rArr; tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_yield
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_io_main
</UL>

<P><STRONG><a name="[271]"></a>tc_iot_shadow_check_and_report</STRONG> (Thumb, 524 bytes, Stack size 80 bytes, tc_iot_shadow.o(i.tc_iot_shadow_check_and_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = tc_iot_shadow_check_and_report &rArr; tc_iot_mqtt_client_publish &rArr; tc_iot_mqtt_publish &rArr; _handle_reconnect &rArr; tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_report_property
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_doc_pack_start
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_doc_pack_end
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_confirm_change
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_cmp_reported_with_local
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_cmp_desired_with_local
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_release_session
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_find_empty_session
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_countdown_ms
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_client_publish
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_report_device_data
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_confirm_devcie_data
</UL>

<P><STRONG><a name="[2a2]"></a>tc_iot_shadow_cmp_desired_with_local</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tc_iot_shadow.o(i.tc_iot_shadow_cmp_desired_with_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tc_iot_shadow_cmp_desired_with_local &rArr; tc_iot_shadow_cmp_local &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_cmp_local
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_check_and_report
</UL>

<P><STRONG><a name="[2a7]"></a>tc_iot_shadow_cmp_local</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tc_iot_shadow.o(i.tc_iot_shadow_cmp_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tc_iot_shadow_cmp_local &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_cmp_reported_with_local
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_cmp_desired_with_local
</UL>

<P><STRONG><a name="[2a4]"></a>tc_iot_shadow_cmp_reported_with_local</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tc_iot_shadow.o(i.tc_iot_shadow_cmp_reported_with_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tc_iot_shadow_cmp_reported_with_local &rArr; tc_iot_shadow_cmp_local &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_cmp_local
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_check_and_report
</UL>

<P><STRONG><a name="[2a3]"></a>tc_iot_shadow_confirm_change</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tc_iot_shadow.o(i.tc_iot_shadow_confirm_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tc_iot_shadow_confirm_change &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_check_and_report
</UL>

<P><STRONG><a name="[29e]"></a>tc_iot_shadow_construct</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, tc_iot_shadow.o(i.tc_iot_shadow_construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = tc_iot_shadow_construct &rArr; tc_iot_mqtt_client_construct &rArr; tc_iot_mqtt_client_connect &rArr; tc_iot_mqtt_connect &rArr; tc_iot_mqtt_connect_with_results &rArr; waitfor &rArr; cycle &rArr; readPacket &rArr; tc_iot_hal_timer_left_ms &rArr; tc_iot_hal_get_ms &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_client_subscribe
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_client_construct
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_server_init
</UL>

<P><STRONG><a name="[2a9]"></a>tc_iot_shadow_copy_local_to_reported</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tc_iot_shadow.o(i.tc_iot_shadow_copy_local_to_reported))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tc_iot_shadow_copy_local_to_reported &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_report_property
</UL>

<P><STRONG><a name="[29d]"></a>tc_iot_shadow_destroy</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tc_iot_shadow.o(i.tc_iot_shadow_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tc_iot_shadow_destroy &rArr; tc_iot_mqtt_client_disconnect &rArr; tc_iot_mqtt_disconnect &rArr; _send_packet &rArr; tc_iot_hal_timer_left_ms &rArr; tc_iot_hal_get_ms &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_client_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_server_destroy
</UL>

<P><STRONG><a name="[2a6]"></a>tc_iot_shadow_doc_pack_end</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tc_iot_shadow.o(i.tc_iot_shadow_doc_pack_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tc_iot_shadow_doc_pack_end &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_update_firm_info
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_doc_pack_for_get_with_sid
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_check_and_report
</UL>

<P><STRONG><a name="[2ab]"></a>tc_iot_shadow_doc_pack_for_get_with_sid</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, tc_iot_shadow.o(i.tc_iot_shadow_doc_pack_for_get_with_sid))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tc_iot_shadow_doc_pack_for_get_with_sid &rArr; tc_iot_shadow_doc_pack_start &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_doc_pack_start
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_doc_pack_end
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_get
</UL>

<P><STRONG><a name="[2a1]"></a>tc_iot_shadow_doc_pack_start</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, tc_iot_shadow.o(i.tc_iot_shadow_doc_pack_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tc_iot_shadow_doc_pack_start &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_unique_session_id
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_update_firm_info
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_doc_pack_for_get_with_sid
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_check_and_report
</UL>

<P><STRONG><a name="[277]"></a>tc_iot_shadow_doc_parse</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, tc_iot_shadow_property.o(i.tc_iot_shadow_doc_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = tc_iot_shadow_doc_parse &rArr; _tc_iot_sync_shadow_property &rArr; tc_iot_confirm_devcie_data &rArr; tc_iot_shadow_check_and_report &rArr; tc_iot_mqtt_client_publish &rArr; tc_iot_mqtt_publish &rArr; _handle_reconnect &rArr; tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_iot_sync_shadow_property
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_json_parse
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_json_find_token
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_device_on_message_received
</UL>

<P><STRONG><a name="[147]"></a>tc_iot_shadow_event_notify</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tc_iot_shadow_property.o(i.tc_iot_shadow_event_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tc_iot_shadow_event_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_server_init
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_device_on_message_received
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_iot_sync_shadow_property
</UL>

<P><STRONG><a name="[2a0]"></a>tc_iot_shadow_get</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, tc_iot_shadow.o(i.tc_iot_shadow_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = tc_iot_shadow_get &rArr; tc_iot_mqtt_client_publish &rArr; tc_iot_mqtt_publish &rArr; _handle_reconnect &rArr; tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_doc_pack_for_get_with_sid
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_find_empty_session
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_countdown_ms
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_client_publish
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_server_init
</UL>

<P><STRONG><a name="[2a5]"></a>tc_iot_shadow_report_property</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, tc_iot_shadow.o(i.tc_iot_shadow_report_property))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tc_iot_shadow_report_property &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_copy_local_to_reported
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_check_and_report
</UL>

<P><STRONG><a name="[146]"></a>tc_iot_shadow_save_to_cached</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tc_iot_shadow.o(i.tc_iot_shadow_save_to_cached))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tc_iot_shadow_save_to_cached &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tc_iot_sync_shadow_property
</UL>

<P><STRONG><a name="[29c]"></a>tc_iot_shadow_update_firm_info</STRONG> (Thumb, 418 bytes, Stack size 80 bytes, tc_iot_shadow.o(i.tc_iot_shadow_update_firm_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = tc_iot_shadow_update_firm_info &rArr; tc_iot_mqtt_client_publish &rArr; tc_iot_mqtt_publish &rArr; _handle_reconnect &rArr; tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_doc_pack_start
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_doc_pack_end
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_release_session
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_find_empty_session
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_countdown_ms
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_client_publish
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_json_escape
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_report_firm
</UL>

<P><STRONG><a name="[29f]"></a>tc_iot_shadow_yield</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tc_iot_shadow.o(i.tc_iot_shadow_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tc_iot_shadow_yield &rArr; tc_iot_mqtt_client_yield &rArr; tc_iot_mqtt_yield &rArr; _handle_reconnect &rArr; tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_release_session
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_is_expired
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_client_yield
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_server_loop
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_server_init
</UL>

<P><STRONG><a name="[287]"></a>tc_iot_unicode_to_utf8</STRONG> (Thumb, 250 bytes, Stack size 20 bytes, tc_iot_json.o(i.tc_iot_unicode_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tc_iot_unicode_to_utf8
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_json_unescape
</UL>

<P><STRONG><a name="[14d]"></a>tc_iot_url_encode</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, tc_iot_url.o(i.tc_iot_url_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tc_iot_url_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_calc_auth_sign
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_tc_iot_url_encoded_field
</UL>

<P><STRONG><a name="[1d0]"></a>tc_iot_url_parse</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, tc_iot_url.o(i.tc_iot_url_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tc_iot_url_parse &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_post_urlencoded
</UL>

<P><STRONG><a name="[14a]"></a>tc_iot_yabuffer_append</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tc_iot_ya_buffer.o(i.tc_iot_yabuffer_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tc_iot_yabuffer_append &rArr; tc_iot_yabuffer_n_append &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_n_append
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_url_long_field
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_tc_iot_url_encoded_field
</UL>

<P><STRONG><a name="[14c]"></a>tc_iot_yabuffer_current</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tc_iot_ya_buffer.o(i.tc_iot_yabuffer_current))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_n_append_header
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_init
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_append_header
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_append_body
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_create_auth_request_form
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_url_long_field
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_tc_iot_url_encoded_field
</UL>

<P><STRONG><a name="[14e]"></a>tc_iot_yabuffer_forward</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tc_iot_ya_buffer.o(i.tc_iot_yabuffer_forward))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_n_append_header
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_init
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_append_header
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_append_body
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_url_long_field
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_tc_iot_url_encoded_field
</UL>

<P><STRONG><a name="[1d5]"></a>tc_iot_yabuffer_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tc_iot_ya_buffer.o(i.tc_iot_yabuffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_create_auth_request_form
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_refresh_auth_token_with_expire
</UL>

<P><STRONG><a name="[14b]"></a>tc_iot_yabuffer_left</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tc_iot_ya_buffer.o(i.tc_iot_yabuffer_left))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_n_append_header
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_init
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_append_header
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_append_body
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_create_auth_request_form
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_url_long_field
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_tc_iot_url_encoded_field
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_n_append
</UL>

<P><STRONG><a name="[2ae]"></a>tc_iot_yabuffer_n_append</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tc_iot_ya_buffer.o(i.tc_iot_yabuffer_n_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tc_iot_yabuffer_n_append &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_left
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_append
</UL>

<P><STRONG><a name="[282]"></a>tc_iot_yabuffer_reset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tc_iot_ya_buffer.o(i.tc_iot_yabuffer_reset))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_http_request_init
</UL>

<P><STRONG><a name="[38]"></a>uart_event_handle</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp_itracker.o(i.uart_event_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = uart_event_handle &rArr; GpsMcuIrqNotify &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_RingBuf
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_get
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuIrqNotify
</UL>
<BR>[Address Reference Count : 2]<UL><LI> bsp_itracker.o(i.Gsm_Uart_Init)
<LI> bsp_itracker.o(i.Gps_Uart_Init)
</UL>
<P><STRONG><a name="[3e]"></a>user_delay_ms</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rak_spi_bme280.o(i.user_delay_ms))
<BR><BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rak_spi_bme280.o(i._bme280_init)
</UL>
<P><STRONG><a name="[3c]"></a>user_spi_read</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rak_spi_bme280.o(i.user_spi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = user_spi_read &rArr; rak_spi_read &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_spi_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rak_spi_bme280.o(i._bme280_init)
</UL>
<P><STRONG><a name="[3d]"></a>user_spi_write</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rak_spi_bme280.o(i.user_spi_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = user_spi_write &rArr; rak_spi_write &rArr; nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_spi_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rak_spi_bme280.o(i._bme280_init)
</UL>
<P><STRONG><a name="[294]"></a>waitfor</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, tc_iot_mqtt.o(i.waitfor))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = waitfor &rArr; cycle &rArr; readPacket &rArr; tc_iot_hal_timer_left_ms &rArr; tc_iot_hal_get_ms &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_is_expired
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_subscribe_with_results
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_reconnect
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_connect_with_results
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_publish
</UL>

<P><STRONG><a name="[f2]"></a>writeCString</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mqttpacket.o(i.writeCString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
</UL>

<P><STRONG><a name="[ec]"></a>writeChar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mqttpacket.o(i.writeChar))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>

<P><STRONG><a name="[ee]"></a>writeInt</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mqttpacket.o(i.writeInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
</UL>

<P><STRONG><a name="[f3]"></a>writeMQTTString</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mqttpacket.o(i.writeMQTTString))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5c]"></a>ble_evt_handler</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, main.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = ble_evt_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[47]"></a>conn_params_error_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.conn_params_error_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = conn_params_error_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1c1]"></a>gap_params_init</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, main.o(i.gap_params_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = gap_params_init &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>log_level_str</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(i.log_level_str))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_collect_data
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensors_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_collect_timer_handle
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sensor_collect_timer_handle
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GsmInit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nus_data_handler
</UL>

<P><STRONG><a name="[44]"></a>nus_data_handler</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, main.o(i.nus_data_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nus_data_handler &rArr; SEGGER_RTT_printf &rArr; SEGGER_RTT_vprintf &rArr; _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_stamp
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_uart_put
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_printf
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_level_str
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[45]"></a>on_adv_evt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(i.on_adv_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = on_adv_evt &rArr; sleep_mode_enter &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_mode_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[46]"></a>on_conn_params_evt</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.on_conn_params_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = on_conn_params_evt &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[256]"></a>sleep_mode_enter</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.sleep_mode_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = sleep_mode_enter &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_sleep_mode_prepare
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_adv_evt
</UL>

<P><STRONG><a name="[198]"></a>are_settings_changed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bme280.o(i.are_settings_changed))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
</UL>

<P><STRONG><a name="[18c]"></a>compensate_humidity</STRONG> (Thumb, 374 bytes, Stack size 80 bytes, bme280.o(i.compensate_humidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = compensate_humidity &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_compensate_data
</UL>

<P><STRONG><a name="[18b]"></a>compensate_pressure</STRONG> (Thumb, 578 bytes, Stack size 72 bytes, bme280.o(i.compensate_pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = compensate_pressure &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_compensate_data
</UL>

<P><STRONG><a name="[18a]"></a>compensate_temperature</STRONG> (Thumb, 320 bytes, Stack size 64 bytes, bme280.o(i.compensate_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = compensate_temperature &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_compensate_data
</UL>

<P><STRONG><a name="[193]"></a>get_calib_data</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, bme280.o(i.get_calib_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_calib_data &rArr; bme280_get_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_init
</UL>

<P><STRONG><a name="[18e]"></a>null_ptr_check</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bme280.o(i.null_ptr_check))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_soft_reset
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_mode
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_init
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_mode
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_sensor_data
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
</UL>

<P><STRONG><a name="[25d]"></a>parse_device_settings</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bme280.o(i.parse_device_settings))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep
</UL>

<P><STRONG><a name="[196]"></a>put_device_to_sleep</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, bme280.o(i.put_device_to_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = put_device_to_sleep &rArr; set_osr_settings &rArr; bme280_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_soft_reset
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_osr_settings
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_filter_standby_settings
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_device_settings
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_mode
</UL>

<P><STRONG><a name="[19a]"></a>set_filter_standby_settings</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bme280.o(i.set_filter_standby_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = set_filter_standby_settings &rArr; bme280_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep
</UL>

<P><STRONG><a name="[199]"></a>set_osr_settings</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, bme280.o(i.set_osr_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = set_osr_settings &rArr; bme280_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_regs
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bme280_set_sensor_settings
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_device_to_sleep
</UL>

<P><STRONG><a name="[4a]"></a>nrf_drv_twi_event_handler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rak_i2c_sensor.o(i.nrf_drv_twi_event_handler))
<BR>[Address Reference Count : 1]<UL><LI> rak_i2c_sensor.o(i.rak_i2c_init)
</UL>
<P><STRONG><a name="[43]"></a>platform_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rak_i2c_lis2mdl.o(i.platform_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = platform_read &rArr; rak_i2c_read &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_i2c_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rak_i2c_lis2mdl.o(i.lis2mdl_init)
</UL>
<P><STRONG><a name="[42]"></a>platform_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rak_i2c_lis2mdl.o(i.platform_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = platform_write &rArr; rak_i2c_write &rArr; nrf_drv_twi_tx &rArr; nrf_drv_twi_xfer &rArr; twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rak_i2c_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rak_i2c_lis2mdl.o(i.lis2mdl_init)
</UL>
<P><STRONG><a name="[1ce]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rak_i2c_opt3001.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_opt3001_data
</UL>

<P><STRONG><a name="[2ba]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rak_spi_bme280.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delay_ms
</UL>

<P><STRONG><a name="[2bb]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rak_spi_bme280.o(i.nrf_gpio_pin_write))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_spi_write
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_spi_read
</UL>

<P><STRONG><a name="[a9]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, gps-board.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuStart
</UL>

<P><STRONG><a name="[a8]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gps-board.o(i.nrf_gpio_pin_write))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpsMcuStart
</UL>

<P><STRONG><a name="[ac]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp_itracker.o(i.nrf_gpio_cfg_output))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_Gpio_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gps_Gpio_Init
</UL>

<P><STRONG><a name="[1be]"></a>get_printf_ascii</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rak_uart_gsm.o(i.get_printf_ascii))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_printf_ascii
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_mem
</UL>

<P><STRONG><a name="[1b7]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rak_uart_gsm.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[cc]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rak_uart_gsm.o(i.nrf_gpio_pin_write))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gsm_PowerUp
</UL>

<P><STRONG><a name="[19e]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, boards.o(i.nrf_gpio_pin_write))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>

<P><STRONG><a name="[57]"></a>bsp_button_event_handler</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, bsp.o(i.bsp_button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bsp_button_event_handler &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_pin_to_button_idx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.constdata)
</UL>
<P><STRONG><a name="[1a5]"></a>bsp_led_indication</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, bsp.o(i.bsp_led_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = bsp_led_indication &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_off
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_state_get
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
</UL>

<P><STRONG><a name="[1a6]"></a>leds_off</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp.o(i.leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = leds_off &rArr; bsp_board_leds_off
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[1aa]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bsp.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_wakeup_button_enable
</UL>

<P><STRONG><a name="[151]"></a>advertising_buttons_configure</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.advertising_buttons_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = advertising_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[5d]"></a>ble_evt_handler</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_evt_handler &rArr; advertising_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_btn_ble.o(sdh_ble_observers1)
</UL>
<P><STRONG><a name="[16f]"></a>ble_device_addr_encode</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[172]"></a>conn_int_encode</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[173]"></a>manuf_specific_data_encode</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = manuf_specific_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[175]"></a>name_encode</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[174]"></a>service_data_encode</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = service_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[170]"></a>uint16_encode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[171]"></a>uuid_list_encode</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_encode
</UL>

<P><STRONG><a name="[2bc]"></a>uuid_list_sized_encode</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[61]"></a>ble_evt_handler</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, ble_conn_params.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ble_evt_handler &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(sdh_ble_observers2)
</UL>
<P><STRONG><a name="[181]"></a>conn_params_negotiation</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[17d]"></a>instance_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_conn_params.o(i.instance_get))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
</UL>

<P><STRONG><a name="[17f]"></a>is_conn_params_ok</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
</UL>

<P><STRONG><a name="[180]"></a>send_error_evt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_conn_params.o(i.send_error_evt))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_handler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_timeout_handler
</UL>

<P><STRONG><a name="[40]"></a>update_timeout_handler</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ble_conn_params.o(i.update_timeout_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = update_timeout_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;instance_get
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_error_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_params.o(i.ble_conn_params_init)
</UL>
<P><STRONG><a name="[5b]"></a>ble_evt_handler</STRONG> (Thumb, 262 bytes, Stack size 176 bytes, ble_conn_state.o(i.ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = ble_evt_handler &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_first_key_index_get
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_bulk_update_by_key
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_conn_state.o(sdh_ble_observers0)
</UL>
<P><STRONG><a name="[20c]"></a>link_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_ble_gatt.o(i.link_init))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_init
</UL>

<P><STRONG><a name="[20d]"></a>on_connected_evt</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, nrf_ble_gatt.o(i.on_connected_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = on_connected_evt &rArr; nrf_log_frontend_std_2 &rArr; std_n &rArr; buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[20e]"></a>on_exchange_mtu_request_evt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, nrf_ble_gatt.o(i.on_exchange_mtu_request_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = on_exchange_mtu_request_evt &rArr; nrf_log_frontend_std_1 &rArr; std_n &rArr; buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_ble_gatt_on_ble_evt
</UL>

<P><STRONG><a name="[187]"></a>rx_char_add</STRONG> (Thumb, 162 bytes, Stack size 72 bytes, ble_nus.o(i.rx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[188]"></a>tx_char_add</STRONG> (Thumb, 218 bytes, Stack size 72 bytes, ble_nus.o(i.tx_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tx_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_nus_init
</UL>

<P><STRONG><a name="[fe]"></a>clock_clk_started_notify</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_evt_handler
</UL>

<P><STRONG><a name="[213]"></a>lfclk_stop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.lfclk_stop))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>

<P><STRONG><a name="[fc]"></a>nrf_clock_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>nrf_clock_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[68]"></a>sd_state_evt_handler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.sd_state_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sd_state_evt_handler &rArr; nrf_drv_clock_lfclk_release &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_state_observers0)
</UL>
<P><STRONG><a name="[63]"></a>soc_evt_handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.soc_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = soc_evt_handler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_clock.o(sdh_soc_observers0)
</UL>
<P><STRONG><a name="[94]"></a>channel_port_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[92]"></a>nrf_gpio_ports_read</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, nrf_drv_gpiote.o(i.nrf_gpio_ports_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_gpio_ports_read
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[16b]"></a>apply_config</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.apply_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = apply_config &rArr; nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[1db]"></a>interrupts_enable</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.interrupts_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = interrupts_enable &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_get_IRQn
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_init
</UL>

<P><STRONG><a name="[22e]"></a>nrf_drv_common_irq_disable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_drv_common_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
</UL>

<P><STRONG><a name="[1de]"></a>nrf_drv_get_IRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_drv_get_IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[226]"></a>nrf_drv_is_in_RAM</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_drv_is_in_RAM))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[228]"></a>nrf_drv_uart_rx_for_uart</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx_for_uart))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_drv_uart_rx_for_uart &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[227]"></a>nrf_drv_uart_rx_for_uarte</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.nrf_drv_uart_rx_for_uarte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_uart_rx_for_uarte &rArr; nrf_uarte_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
</UL>

<P><STRONG><a name="[235]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_input
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>

<P><STRONG><a name="[234]"></a>nrf_gpio_cfg_default</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pins_to_default
</UL>

<P><STRONG><a name="[16d]"></a>nrf_gpio_cfg_input</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_input &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[16c]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_config
</UL>

<P><STRONG><a name="[22a]"></a>nrf_uart_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
</UL>

<P><STRONG><a name="[1dd]"></a>nrf_uart_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_enable
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[2b7]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[22c]"></a>nrf_uarte_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uarte
</UL>

<P><STRONG><a name="[1dc]"></a>nrf_uarte_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.nrf_uarte_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uarte
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_enable
</UL>

<P><STRONG><a name="[22f]"></a>pins_to_default</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.pins_to_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pins_to_default &rArr; nrf_gpio_cfg_default &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_default
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_uninit
</UL>

<P><STRONG><a name="[22b]"></a>rx_byte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
</UL>

<P><STRONG><a name="[2b8]"></a>rx_done_event</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[229]"></a>rx_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.rx_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_enable &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_enable
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx_for_uart
</UL>

<P><STRONG><a name="[22d]"></a>tx_byte</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[2b9]"></a>tx_done_event</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, nrf_drv_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[114]"></a>uart_irq_handler</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, nrf_drv_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[113]"></a>uarte_irq_handler</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.uarte_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[266]"></a>nrf_drv_is_in_RAM</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_drv_is_in_RAM))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[218]"></a>nrf_gpio_cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
</UL>

<P><STRONG><a name="[219]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[110]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[10f]"></a>nrf_spim_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[21d]"></a>spim_xfer</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, nrf_drv_spi.o(i.spim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spim_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_is_in_RAM
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>

<P><STRONG><a name="[10e]"></a>irq_handler_twi</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, nrf_drv_twi.o(i.irq_handler_twi))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = irq_handler_twi &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>

<P><STRONG><a name="[2b1]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[2b0]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[2b4]"></a>nrf_twi_event_check</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twi_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>

<P><STRONG><a name="[2b2]"></a>nrf_twi_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.nrf_twi_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_twi_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>

<P><STRONG><a name="[21f]"></a>twi_clear_bus</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_clear_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[2b3]"></a>twi_process_error</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.twi_process_error))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>

<P><STRONG><a name="[1e1]"></a>twi_rx_start_transfer</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, nrf_drv_twi.o(i.twi_rx_start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = twi_rx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_process_error
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
</UL>

<P><STRONG><a name="[2b5]"></a>twi_send_byte</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, nrf_drv_twi.o(i.twi_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = twi_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
</UL>

<P><STRONG><a name="[1e0]"></a>twi_transfer</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, nrf_drv_twi.o(i.twi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_send_byte
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
</UL>

<P><STRONG><a name="[1e2]"></a>twi_tx_start_transfer</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, nrf_drv_twi.o(i.twi_tx_start_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_transfer
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_send_byte
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_process_error
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twi_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_xfer
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twi
</UL>

<P><STRONG><a name="[225]"></a>twi_xfer</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.twi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = twi_xfer &rArr; twi_tx_start_transfer &rArr; twi_transfer &rArr; twi_send_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_tx_start_transfer
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_rx_start_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
</UL>

<P><STRONG><a name="[100]"></a>nrf_drv_rtc_int_handler</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, nrf_drv_rtc.o(i.nrf_drv_rtc_int_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_rtc_int_handler &rArr; nrf_rtc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC2_IRQHandler
</UL>

<P><STRONG><a name="[216]"></a>nrf_rtc_event_clear</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_drv_rtc.o(i.nrf_rtc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_rtc_int_handler
</UL>

<P><STRONG><a name="[157]"></a>fifo_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_get))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>

<P><STRONG><a name="[159]"></a>fifo_put</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, app_fifo.o(i.fifo_put))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
</UL>

<P><STRONG><a name="[15c]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[15e]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[161]"></a>NVIC_SetPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timeouts_check
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[15d]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_timer.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>

<P><STRONG><a name="[1af]"></a>compare_reg_update</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, app_timer.o(i.compare_reg_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = compare_reg_update &rArr; rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[2af]"></a>elapsed_ticks_acquire</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, app_timer.o(i.elapsed_ticks_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = elapsed_ticks_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[1f7]"></a>list_insertions_handler</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, app_timer.o(i.list_insertions_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[1b0]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, app_timer.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc1_stop
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[15b]"></a>rtc1_stop</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, app_timer.o(i.rtc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc1_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>

<P><STRONG><a name="[111]"></a>timer_list_handler</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = timer_list_handler &rArr; list_insertions_handler &rArr; timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elapsed_ticks_acquire
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_reg_update
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_EGU0_IRQHandler
</UL>

<P><STRONG><a name="[1f9]"></a>timer_list_insert</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_timer.o(i.timer_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[1f8]"></a>timer_list_remove</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, app_timer.o(i.timer_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insertions_handler
</UL>

<P><STRONG><a name="[163]"></a>timer_stop_op_schedule</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, app_timer.o(i.timer_stop_op_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = timer_stop_op_schedule &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_op_alloc
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>

<P><STRONG><a name="[ff]"></a>timer_timeouts_check</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, app_timer.o(i.timer_timeouts_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_timeouts_check
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[160]"></a>user_op_alloc</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, app_timer.o(i.user_op_alloc))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_stop_op_schedule
</UL>

<P><STRONG><a name="[3f]"></a>uart_event_handler</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, app_uart_fifo.o(i.uart_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = uart_event_handler &rArr; nrf_drv_uart_rx &rArr; nrf_drv_uart_rx_for_uart &rArr; rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_tx
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_uart_rx
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_put
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_fifo_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_uart_fifo.o(i.app_uart_init)
</UL>
<P><STRONG><a name="[1ad]"></a>buffer_add</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_fprintf_format.o(i.buffer_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[1d9]"></a>int_print</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, nrf_fprintf_format.o(i.int_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned_print
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[1da]"></a>unsigned_print</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, nrf_fprintf_format.o(i.unsigned_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buffer_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_print
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_fmt
</UL>

<P><STRONG><a name="[1c0]"></a>event_send</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, nrf_fstorage_sd.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = event_send
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[232]"></a>queue_process</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, nrf_fstorage_sd.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = queue_process &rArr; nrf_fstorage_sys_evt_handler &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sys_evt_handler
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fstorage_sdh_state_handler
</UL>

<P><STRONG><a name="[205]"></a>memobj_op</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, nrf_memobj.o(i.memobj_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = memobj_op &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_write
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_memobj_read
</UL>

<P><STRONG><a name="[254]"></a>nrf_section_iter_item_set</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nrf_section_iter.o(i.nrf_section_iter_item_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_section_iter_item_set
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
</UL>

<P><STRONG><a name="[262]"></a>sdk_mapped_flags_get_by_index</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_get_by_index))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_first_key_index_get
</UL>

<P><STRONG><a name="[5a]"></a>nrf_log_backend_rtt_flush</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_flush))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>nrf_log_backend_rtt_panic_set</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_panic_set))
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>nrf_log_backend_rtt_put</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = nrf_log_backend_rtt_put &rArr; nrf_log_backend_serial_put &rArr; nrf_log_std_entry_process &rArr; prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_backend_serial_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>serial_tx</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nrf_log_backend_rtt.o(i.serial_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = serial_tx &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_log_backend_rtt.o(i.nrf_log_backend_rtt_put)
</UL>
<P><STRONG><a name="[1ab]"></a>buf_prealloc</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, nrf_log_frontend.o(i.buf_prealloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std_n
</UL>

<P><STRONG><a name="[1ac]"></a>log_skip</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, nrf_log_frontend.o(i.log_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = log_skip &rArr; nrf_atomic_flag_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_set
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_atomic_flag_clear_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>

<P><STRONG><a name="[206]"></a>module_idx_get</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, nrf_log_frontend.o(i.module_idx_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = module_idx_get
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_filter_get
</UL>

<P><STRONG><a name="[1fb]"></a>nrf_atomic_flag_clear_fetch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_atomic_flag_clear_fetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_clear_fetch
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_and
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_dequeue
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[1fa]"></a>nrf_atomic_flag_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_log_frontend.o(i.nrf_atomic_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_atomic_flag_set
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___18_nrf_log_frontend_c_bc460776__nrf_atomic_internal_orr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_skip
</UL>

<P><STRONG><a name="[242]"></a>std_n</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, nrf_log_frontend.o(i.std_n))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = std_n &rArr; buf_prealloc &rArr; log_skip &rArr; nrf_atomic_flag_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_prealloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_2
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_1
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_frontend_std_0
</UL>

<P><STRONG><a name="[244]"></a>postfix_process</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, nrf_log_str_formatter.o(i.postfix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = postfix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf_buffer_flush
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[243]"></a>prefix_process</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, nrf_log_str_formatter.o(i.prefix_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prefix_process &rArr; nrf_fprintf &rArr; nrf_fprintf_fmt &rArr; int_print &rArr; unsigned_print &rArr; buffer_add &rArr; nrf_fprintf_buffer_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_fprintf
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_module_name_get
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_color_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_std_entry_process
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_log_hexdump_entry_process
</UL>

<P><STRONG><a name="[102]"></a>_DoInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[107]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[109]"></a>_WriteBlocking</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[108]"></a>_WriteNoCheck</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
</UL>

<P><STRONG><a name="[10c]"></a>_PrintInt</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, segger_rtt_printf.o(i._PrintInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _PrintInt &rArr; _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
</UL>

<P><STRONG><a name="[10d]"></a>_PrintUnsigned</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, segger_rtt_printf.o(i._PrintUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _PrintUnsigned &rArr; _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_StoreChar
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[10b]"></a>_StoreChar</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, segger_rtt_printf.o(i._StoreChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _StoreChar &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_vprintf
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintUnsigned
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PrintInt
</UL>

<P><STRONG><a name="[261]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_sdh.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_DisableIRQ
</UL>

<P><STRONG><a name="[252]"></a>sd_nvic_DisableIRQ</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, nrf_sdh.o(i.sd_nvic_DisableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_nvic_DisableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[253]"></a>sd_nvic_EnableIRQ</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, nrf_sdh.o(i.sd_nvic_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
</UL>

<P><STRONG><a name="[250]"></a>sdh_request_observer_notify</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrf_sdh.o(i.sdh_request_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdh_request_observer_notify &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[251]"></a>sdh_state_observer_notify</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, nrf_sdh.o(i.sdh_state_observer_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdh_state_observer_notify &rArr; nrf_section_iter_next &rArr; nrf_section_iter_item_set
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_enable_request
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_sdh_disable_request
</UL>

<P><STRONG><a name="[66]"></a>nrf_sdh_ble_evts_poll</STRONG> (Thumb, 74 bytes, Stack size 440 bytes, nrf_sdh_ble.o(i.nrf_sdh_ble_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = nrf_sdh_ble_evts_poll &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_ble.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[67]"></a>nrf_sdh_soc_evts_poll</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, nrf_sdh_soc.o(i.nrf_sdh_soc_evts_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = nrf_sdh_soc_evts_poll &rArr; app_error_handler_bare &rArr; app_error_fault_handler &rArr; nrf_log_frontend_dequeue &rArr; nrf_memobj_alloc &rArr; nrf_memobj_free &rArr; nrf_balloc_free &rArr; app_util_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_next
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_section_iter_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_sdh_soc.o(sdh_stack_observers0)
</UL>
<P><STRONG><a name="[27e]"></a>tc_iot_hmac_sha256_init</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, tc_iot_hmac.o(i.tc_iot_hmac_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tc_iot_hmac_sha256_init &rArr; tc_iot_sha256_finish &rArr; tc_iot_sha256_update &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_sha256_update
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_sha256_init
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_sha256_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hmac_sha256
</UL>

<P><STRONG><a name="[27f]"></a>tc_iot_sha256_finish</STRONG> (Thumb, 142 bytes, Stack size 96 bytes, tc_iot_hmac.o(i.tc_iot_sha256_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = tc_iot_sha256_finish &rArr; tc_iot_sha256_update &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_sha256_update
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hmac_sha256
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hmac_sha256_init
</UL>

<P><STRONG><a name="[280]"></a>tc_iot_sha256_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tc_iot_hmac.o(i.tc_iot_sha256_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tc_iot_sha256_init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hmac_sha256
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hmac_sha256_init
</UL>

<P><STRONG><a name="[281]"></a>tc_iot_sha256_update</STRONG> (Thumb, 512 bytes, Stack size 344 bytes, tc_iot_hmac.o(i.tc_iot_sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = tc_iot_sha256_update &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hmac_sha256
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_sha256_finish
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hmac_sha256_init
</UL>

<P><STRONG><a name="[149]"></a>add_tc_iot_url_encoded_field</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, tc_iot_http_utils.o(i.add_tc_iot_url_encoded_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = add_tc_iot_url_encoded_field &rArr; tc_iot_yabuffer_append &rArr; tc_iot_yabuffer_n_append &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_left
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_forward
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_current
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_append
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_url_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_create_auth_request_form
</UL>

<P><STRONG><a name="[14f]"></a>add_url_long_field</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, tc_iot_http_utils.o(i.add_url_long_field))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = add_url_long_field &rArr; tc_iot_yabuffer_append &rArr; tc_iot_yabuffer_n_append &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_left
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_forward
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_current
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_yabuffer_append
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_create_auth_request_form
</UL>

<P><STRONG><a name="[12f]"></a>_check_connection</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tc_iot_mqtt.o(i._check_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = _check_connection &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_get_auto_reconnect
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_handle_reconnect
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_is_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_subscribe_with_results
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_publish
</UL>

<P><STRONG><a name="[1b6]"></a>_close_session</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tc_iot_mqtt.o(i._close_session))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_subscribe_with_results
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_publish
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_disconnect
</UL>

<P><STRONG><a name="[296]"></a>_get_next_pack_id</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tc_iot_mqtt.o(i._get_next_pack_id))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_subscribe_with_results
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_publish
</UL>

<P><STRONG><a name="[132]"></a>_handle_reconnect</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, tc_iot_mqtt.o(i._handle_reconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = _handle_reconnect &rArr; tc_iot_mqtt_subscribe &rArr; tc_iot_mqtt_subscribe_with_results &rArr;  _handle_reconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_is_expired
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_countdown_ms
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_reconnect
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_get_auto_reconnect
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_subscribe
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_subscribe_with_results
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_connection
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_yield
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_publish
</UL>

<P><STRONG><a name="[1b9]"></a>_on_new_message_data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tc_iot_mqtt.o(i._on_new_message_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _on_new_message_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliverMessage
</UL>

<P><STRONG><a name="[13b]"></a>_send_packet</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tc_iot_mqtt.o(i._send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _send_packet &rArr; tc_iot_hal_timer_left_ms &rArr; tc_iot_hal_get_ms &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_left_ms
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_is_expired
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_countdown_second
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_subscribe_with_results
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_reconnect
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_connect_with_results
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_publish
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_mqtt_disconnect
</UL>

<P><STRONG><a name="[1b8]"></a>isTopicMatched</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, tc_iot_mqtt.o(i.isTopicMatched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isTopicMatched
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliverMessage
</UL>

<P><STRONG><a name="[1b2]"></a>readPacket</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, tc_iot_mqtt.o(i.readPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = readPacket &rArr; tc_iot_hal_timer_left_ms &rArr; tc_iot_hal_get_ms &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_left_ms
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_timer_countdown_second
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[2ac]"></a>_get_unique_session_id</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tc_iot_shadow.o(i._get_unique_session_id))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_shadow_doc_pack_start
</UL>

<P><STRONG><a name="[56]"></a>_tc_iot_shadow_on_message_received</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, tc_iot_shadow.o(i._tc_iot_shadow_on_message_received))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _tc_iot_shadow_on_message_received &rArr; tc_iot_json_parse &rArr; jsmn_parse &rArr; jsmn_parse_string &rArr; jsmn_alloc_token
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_release_session
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_json_parse
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_json_find_token
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tc_iot_shadow.o(i.tc_iot_shadow_construct)
</UL>
<P><STRONG><a name="[29b]"></a>DJB_hash</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tc_iot_hal_os.o(i.DJB_hash))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_random
</UL>

<P><STRONG><a name="[27d]"></a>nrf_delay_us</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, tc_iot_hal_os.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tc_iot_hal_sleep_ms
</UL>

<P><STRONG><a name="[1e4]"></a>jsmn_alloc_token</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, jsmn.o(i.jsmn_alloc_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = jsmn_alloc_token
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse_string
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse_primitive
</UL>

<P><STRONG><a name="[1e6]"></a>jsmn_fill_token</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, jsmn.o(i.jsmn_fill_token))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse_string
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse_primitive
</UL>

<P><STRONG><a name="[1e3]"></a>jsmn_parse_primitive</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, jsmn.o(i.jsmn_parse_primitive))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = jsmn_parse_primitive &rArr; jsmn_alloc_token
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_fill_token
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_alloc_token
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse
</UL>

<P><STRONG><a name="[1e5]"></a>jsmn_parse_string</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, jsmn.o(i.jsmn_parse_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = jsmn_parse_string &rArr; jsmn_alloc_token
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_fill_token
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_alloc_token
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse
</UL>

<P><STRONG><a name="[133]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[117]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[139]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[138]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3a]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[3b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[85]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[8b]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
